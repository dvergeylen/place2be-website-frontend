{
  "version": 3,
  "file": "dashboard-components.css",
  "sources": [
    "../../Dashboard.svelte",
    "../../GameDetails.svelte",
    "../../GameList.svelte",
    "../../GameTabs.svelte",
    "../../NewGame.svelte",
    "../../Action.svelte",
    "../../Settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { setContext } from 'svelte';\n  import { createUrl, fetchData } from '../../javascripts/utils/helpers';\n  import GameList from './GameList.svelte';\n  import NewGame from './NewGame.svelte';\n  import GameDetails from './GameDetails.svelte';\n  export let apiProtocol;\n  export let apiHost;\n  export let userId = undefined;\n  let gameList;\n  let gameUrl;\n\n  async function getUserGamesList(id) {\n    const url = createUrl(apiProtocol, apiHost, 'users', id, 'games');\n    const res = await fetchData(url);\n    const resJson = await res.json();\n    return resJson.data;\n  };\n\n  async function handleNewGameUrl(event) {\n    if (event.detail.updateGameList) {\n      gameList = await getUserGamesList(userId);\n    }\n    gameUrl = event.detail.gameUrl;\n  }\n\n  $: gameList = getUserGamesList(userId);\n  $: setContext('apiProtocol', apiProtocol);\n  $: setContext('apiHost', apiHost);\n  $: setContext('userId', userId);\n</script>\n\n\n <div class=\"columns\">\n  <div class=\"column is-2\">\n    <GameList {gameList} {gameUrl} on:message={handleNewGameUrl} />\n  </div>\n  <div class=\"column\">\n    <div id=\"game-content\" class=\"box\">\n      {#if !gameUrl}\n        <p>‚Üê Start by hitting the 'New Game' button !\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#party_popper\" />\n          </svg>\n        </p>\n      {:else if gameUrl === 'new'}\n        <NewGame on:message={handleNewGameUrl} />\n      {:else}\n        <GameDetails {gameUrl} on:message={handleNewGameUrl} />\n      {/if}\n    </div>\n  </div>\n</div>\n\n<style lang='scss'>div#game-content {\n  max-width: 1152px; }\n\n/*# sourceMappingURL=Dashboard.svelte.css.map */</style>",
    "<script>\n  import { fetchData } from '../../javascripts/utils/helpers';\n  import { game } from '../../javascripts/stores/gameStore';\n  import { savingStatus, lastSaveDate } from '../../javascripts/stores/savingStore';\n  import GameTabs from './GameTabs.svelte';\n  import Overview from './Tabs/Overview.svelte';\n  import Actions from './Tabs/Actions.svelte';\n  import Achievements from './Tabs/Achievements.svelte';\n  import Rewards from './Tabs/Rewards.svelte';\n  import Stats from './Tabs/Stats.svelte';\n  import Dev from './Tabs/Dev.svelte';\n  import Settings from './Tabs/Settings.svelte';\n\n  export let gameUrl;\n  let error = null;\n  let selectedTab = 'actions';\n  const tabs = {\n    overview: Overview,\n    actions: Actions,\n    achievements: Achievements,\n    rewards: Rewards,\n    stats: Stats,\n    dev: Dev,\n    settings: Settings,\n  }\n\n  async function getGame(url) {\n    const res = await fetchData(url);\n    if (res.ok) {\n      const resJson = await res.json();\n      game.set(resJson.data);\n    } else {\n      error = 'Could not find the game you are looking for...';\n    }\n  }\n\n  function handleNewSelectedTab(event) {\n    selectedTab = event.detail.selectedTab;\n  }\n\n  // Update game Store when gameUrl is updated\n  $: getGame(gameUrl);\n</script>\n\n{#if !error}\n  {#if !$game}\n    <h1 class=\"title is-4 has-vcentered-content\">\n      Loading Game...\n    </h1>\n  {:else}\n    <h1 class=\"title is-4 has-vcentered-content\">\n      <span id=\"saving-status\">\n        <abbr title=\"Last save : {$lastSaveDate.toLocaleString()}\">\n          <svg class=\"fa saved\" class:is-hidden={$savingStatus != 'saved'}>\n            <use href=\"../images/fontawesome-sprite.svg#solid-check-circle\" />\n          </svg>\n          <svg class=\"fa saving rotating\" class:is-hidden={$savingStatus != 'saving'}>\n            <use href=\"../images/fontawesome-sprite.svg#solid-spinner-third\" />\n          </svg>\n          <svg class=\"fa failed\" class:is-hidden={$savingStatus != 'failed'}>\n            <use href=\"../images/fontawesome-sprite.svg#solid-times-circle\" />\n          </svg>\n        </abbr>\n      </span>\n      {$game['attributes']['name']}\n    </h1>\n    <h1 id=\"game-description\" class=\"subtitle is-6\">{$game['attributes']['description']}</h1>\n  {/if}\n\n  <GameTabs game={$game} {selectedTab} on:message={handleNewSelectedTab} />\n  <svelte:component this={tabs[selectedTab]} on:message/>\n{:else}\n  <div class=\"notification is-warning\" class:is-hidden={!error}>\n    <p>Could not load the game you are looking for...</p>\n  </div>\n{/if}\n\n<style lang=\"scss\">#saving-status {\n  border-bottom-style: none;\n  padding: 0.5em 0;\n  margin-right: 0.5em; }\n  #saving-status svg {\n    vertical-align: middle; }\n  #saving-status .saved {\n    fill: #73c90a; }\n  #saving-status .saving {\n    fill: #b1b1b1; }\n  #saving-status .failed {\n    fill: darkred; }\n\n#game-description {\n  margin-left: 2.3em; }\n\n/*# sourceMappingURL=GameDetails.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  export let gameList;\n  export let gameUrl;\n\n  const dispatch = createEventDispatcher();\n\n  function updateGameUrl(url) {\n    dispatch('message', {\n      gameUrl: url,\n    });\n  }\n</script>\n\n<div class=\"content\">\n  {#await gameList}\n    <div class=\"has-vcentered-content\">\n      <svg class=\"fa rotating\">\n        <use href=\"../images/fontawesome-sprite.svg#regular-sync-alt\" />\n      </svg>\n      <p class=\"left-spaced\">Loading Game List</p>\n    </div>\n  {:then games}\n    <article class=\"panel is-primary\">\n      <p class=\"panel-heading\">\n        Your Games :\n      </p>\n      <a href=\"javascript:void(0)\" class=\"panel-block fill-primary\"\n        on:click|preventDefault={async () => updateGameUrl('new')}>\n        <span class=\"panel-icon\">\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#rocket\" />\n          </svg>\n        </span>\n        <span>\n          New Game\n        </span>\n      </a>\n      {#each games as game}\n        <a href={game.links.self} on:click|preventDefault={() => updateGameUrl(game.links.self)}\n          class=\"panel-block\">\n          <span class=\"panel-icon\" class:fill-primary={gameUrl === game.links.self}>\n            <svg class=\"twemoji\">\n              <use href=\"../images/twemoji-sprite.svg#trophy\" />\n            </svg>\n          </span>\n          {game.attributes.name}\n        </a>\n      {/each}\n    </article>\n  {:catch error}\n    <p class=\"error\">{error.message}</p>\n  {/await}\n</div>\n\n<style lang='scss'>.twemoji {\n  width: 1.2em;\n  height: 1em; }\n\n/*# sourceMappingURL=GameList.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  export let game;\n  export let selectedTab = 'overview';\n\n  const dispatch = createEventDispatcher();\n\n  function updateSelectedTab(selectedTab) {\n    dispatch('message', {\n      selectedTab,\n    });\n  }\n</script>\n\n\n{#if !game}\n  Loading Game tabs...\n{:else}\n  <div id=\"game-tabs-container\" class=\"tabs\">\n    <ul>\n      <li class:is-active={selectedTab === 'overview'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('overview')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#compass\" />\n          </svg>\n          <span class=\"left-spaced\">Overview</span>\n        </a>\n      </li>\n      <li class:is-active={selectedTab === 'actions'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('actions')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#high_voltage_sign\" />\n          </svg>\n          <span class=\"left-spaced\">Actions</span>\n        </a>\n      </li>\n      <li class:is-active={selectedTab === 'achievements'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('achievements')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#trophy\" />\n          </svg>\n          <span class=\"left-spaced\">Achievements</span>\n        </a>\n      </li>\n      <li class:is-active={selectedTab === 'rewards'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('rewards')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#wrapped_present\" />\n          </svg>\n          <span class=\"left-spaced\">Rewards</span>\n        </a>\n      </li>\n      <li class:is-active={selectedTab === 'stats'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('stats')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#bar_chart\" />\n          </svg>\n          <span class=\"left-spaced\">Stats</span>\n        </a>\n      </li>\n      <li class:is-active={selectedTab === 'dev'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('dev')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#woman_technologist\" />\n          </svg>\n          <span class=\"left-spaced\">Integration</span>\n        </a>\n      </li>\n      <li class:is-active={selectedTab === 'settings'}>\n        <a href=\"javascript:void(0)\"\n          on:click|preventDefault={() => updateSelectedTab('settings')}>\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#gear\" />\n          </svg>\n          <span class=\"left-spaced\">Settings</span>\n        </a>\n      </li>\n    </ul>\n  </div>\n{/if}\n\n<style lang='scss'>#game-tabs-container {\n  margin-top: 1em;\n  margin-bottom: 1em;\n  font-size: 1.1em; }\n\n.left-spaced {\n  margin-left: 0.5em; }\n\n/*# sourceMappingURL=GameTabs.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher } from 'svelte';\n  import { createUrl, postFormData } from '../../javascripts/utils/helpers';\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  let error = null;\n\n  async function handleSubmit() {\n    const url = createUrl(apiProtocol, apiHost, 'users', userId, 'games');\n    const formData = new FormData(document.getElementById('new-game-form'));\n    const res = await postFormData(url, formData);\n\n    if (!res.ok) {\n      const responseBody = await res.text();\n      error = JSON.parse(responseBody);\n    } else {\n      const responseBody = await res.json();\n\n      /* Update Dashboard's new gameUrl to display */\n      dispatch('message', {\n        gameUrl: responseBody.data.links.self,\n        updateGameList: true,\n      });\n    }\n  }\n\n  function cancel() {\n    /* Update Dashboard's new gameUrl to display */\n    dispatch('message', {\n      gameUrl: undefined,\n    });\n  }\n\n  function flushError() {\n    error = null;\n  }\n</script>\n\n\n<div id=\"new-game\">\n  <h1 class=\"title is-4\">\n    Create new Game :\n  </h1>\n  <p>A Game contains all Actions\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#high_voltage_sign\" />\n    </svg>,\n    Achievements\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#trophy\" />\n    </svg>,\n    Rewards\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#wrapped_present\" />\n    </svg>\n    and Assets\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#package\" />\n    </svg>\n    your players can interact with.</p>\n\n  <hr>\n\n  <form id=\"new-game-form\" on:submit|preventDefault={handleSubmit}>\n    <div class=\"notification is-danger\" class:is-hidden={!error} >\n      <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n      <h1 class='title is-5'>\n        Unable to Create new Game :\n      </h1>\n      <ul>\n        {#if error}\n          {#each Object.entries(error) as [ key, ar ]}\n            <li>{key} : {ar}</li>\n          {/each}\n        {/if}\n      </ul>\n    </div>\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Game Name\n        <span class=\"mandatory\">*</span>\n      </label>\n      <div class=\"control\">\n        <input name=\"game[name]\" class=\"input reasonable-width\" type=\"text\">\n      </div>\n    </div>\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Description\n        <span class=\"note\">(optional)</span>\n      </label>\n      <div class=\"control\">\n        <input name=\"game[description]\" class=\"input\" type=\"text\">\n      </div>\n      <p class=\"help\">Game and description won't be visible to your players.</p>\n    </div>\n\n    <div class=\"field is-grouped\">\n      <div class=\"control\">\n        <button class=\"button is-link\">Create</button>\n      </div>\n      <div class=\"control\">\n        <button class=\"button is-link is-light\" on:click|preventDefault={() => cancel()}>Cancel</button>\n      </div>\n    </div>\n  </form>\n</div>\n\n\n\n<style lang=\"scss\">#new-game {\n  max-width: 1000px; }\n\n.mandatory {\n  color: red; }\n\n.note {\n  min-height: 17px;\n  margin: 4px 0 2px;\n  font-size: 12px;\n  color: #586069; }\n\n/*# sourceMappingURL=NewGame.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher } from 'svelte';\n  import { createUrl } from '../../../../javascripts/utils/helpers';\n  import { postFormData } from '../../../../javascripts/utils/helpers';\n  import { game } from '../../../../javascripts/stores/gameStore';\n  import { savingStatus } from '../../../../javascripts/stores/savingStore';\n  export let action = {\n    attributes: {\n      name: '',\n      value_type: 'boolean',\n      tags: '',\n    }\n  };\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  let error = null;\n  let tags;\n  let displayNameInput = false;\n\n  async function saveAction() {\n    savingStatus.set('saving');\n    let path, method;\n\n    if (action.id) {\n      path = ['users', userId, 'games', $game.id, 'actions', action.id];\n      method = 'PUT';\n    } else {\n      path = ['users', userId, 'games', $game.id, 'actions'];\n      method = 'POST';\n    }\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const formData = new FormData(document.getElementById(`${action.id || 'new'}-action-form`));\n    const res = await postFormData(url, formData, method);\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      /* Update action (update) or Update actions list (new) */\n      savingStatus.set('saved');\n      if (action.id) {\n        const updatedAction = await res.json();\n        action = updatedAction.data;\n      } else {\n        const actions = await res.json();\n        dispatch('message', {\n          actions: actions.data,\n        });\n      }\n    }\n  }\n\n  async function destroyAction() {\n    savingStatus.set('saving');\n    const path = ['users', userId, 'games', $game.id, 'actions', action.id];\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await postFormData(url, {}, 'DELETE');\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n\n      /* Update actions list */\n      const actions = await res.json();\n      dispatch('message', {\n        actions: actions.data,\n      });\n    }\n  }\n\n  function updateAction() {\n    if (action.id) saveAction();\n  }\n\n  function toggleEditName() {\n    displayNameInput = !displayNameInput;\n  }\n\n  function flushError() {\n    error = null;\n  }\n</script>\n\n<form id=\"{action.id || 'new'}-action-form\" on:change={updateAction}\n  on:submit|preventDefault={saveAction}>\n  <div class='item-box'>\n    {#if action.id}\n      <div class=\"columns is-mobile\">\n        <div class=\"column\">\n          <h1 id=\"action-name\" class=\"title is-5 has-vcentered-text\">\n            <span class:is-hidden={displayNameInput}>\n              {action.attributes.name}\n            </span>\n            <input class=\"input reasonable-width\" type=\"text\" name=\"act[name]\"\n              bind:value={action.attributes.name}\n            class:is-hidden={!displayNameInput}>\n\n            <svg class=\"fa name-edit fill-primary\" class:is-hidden={displayNameInput}\n              on:click={toggleEditName}>\n              <use href=\"../images/fontawesome-sprite.svg#regular-edit\" />\n            </svg>\n            <svg class=\"fa name-edit fill-primary\" class:is-hidden={!displayNameInput}\n              on:click={toggleEditName}>\n              <use href=\"../images/fontawesome-sprite.svg#regular-check-circle\" />\n            </svg>\n          </h1>\n        </div>\n          <div class=\"column is-1\">\n              <svg class=\"fa\" on:click={destroyAction}>\n                <use href=\"../images/fontawesome-sprite.svg#regular-times-circle\" />\n              </svg>\n          </div>\n      </div>\n    {/if}\n\n    <div class=\"notification is-danger\" class:is-hidden={!error} >\n      <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n      <h1 class='title is-5'>\n        Unable to Update Action :\n      </h1>\n      <ul>\n        {#if error}\n          {#each Object.entries(error) as [ key, ar ]}\n            <li>{key} : {ar}</li>\n          {/each}\n        {/if}\n      </ul>\n    </div>\n\n    <table class=\"table\">\n      <tbody>\n        {#if !action.id}\n          <tr>\n            <td class=\"right\">\n              Name :\n            </td>\n            <td>\n              <input class=\"input\" type=\"text\" name=\"act[name]\">\n            </td>\n          </tr>\n        {/if}\n        <tr>\n          <td class=\"right\">\n            Value Type :\n          </td>\n          <td>\n            <div class=\"select\">\n              <select name=\"act[value_type]\" bind:value={action.attributes.value_type}>\n                <option value='boolean'>Boolean (Yes | No)</option>\n                <option value='int'>Integer</option>\n                <option value='float'>Float</option>\n                <option value='string'>String</option>\n                <option value='date'>Date</option>\n              </select>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"right\">\n            Team Id field :\n          </td>\n          <td>\n            <div class=\"select\">\n              <select name=\"act[team_required]\" bind:value={action.attributes.team_required}>\n                <option value=\"false\">No, optional</option>\n                <option value=\"true\">Yes, required</option>\n              </select>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"right\">\n            Tags :\n          </td>\n          <td>\n            <input class=\"input\" type=\"text\" name=\"act[tags]\" bind:value={tags}>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <p class=\"help\">\n              Need help? See \n              <a href=\"https://doc.place2be.io\" target=\"_blank\">\n                <span>Doc</span>\n                <svg class=\"fa fill-primary no-hover\">\n                  <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n                </svg>\n              </a>\n            </p>\n          </td>\n          <td>\n            {#if !action.id}\n              <button class=\"button is-primary\">\n                Create\n              </button>\n            {/if}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</form>\n\n\n<style lang='scss'>#action-name {\n  margin-top: 0.5em;\n  margin-left: 0.5em; }\n\ntd {\n  vertical-align: middle; }\n\ntd.right {\n  text-align: right; }\n\n.name-edit {\n  height: 0.7em;\n  margin-left: 0.2em; }\n\n.fa {\n  cursor: pointer; }\n\n/*# sourceMappingURL=Action.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher } from 'svelte';\n  import { createUrl } from '../../../javascripts/utils/helpers';\n  import { postFormData } from '../../../javascripts/utils/helpers';\n  import { game } from '../../../javascripts/stores/gameStore';\n  import { savingStatus } from '../../../javascripts/stores/savingStore';\n  let error = null;\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  async function handleSubmit(path, formId) {\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const formData = new FormData(document.getElementById(formId));\n\n    savingStatus.set('saving');\n    const res = await postFormData(url, formData, 'PUT');\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n\n      /* Update Game Store with new content */\n      const newGame = await res.json();\n      game.set(newGame.data);\n\n      /* Update Dashboard's game List */\n      dispatch('message', {\n        gameUrl: newGame.data.links.self,\n        updateGameList: true,\n      });\n    }\n  }\n\n  function handleUpdate() {\n    handleSubmit(['users', userId, 'games', $game.id], 'settings-form');\n  }\n\n  function handleDanger() {\n    handleSubmit(['users', userId, 'games', $game.id], 'danger-form');\n  }\n\n  async function handleDestroy() {\n    const path = ['users', userId, 'games', $game.id];\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await postFormData(url, {}, 'DELETE');\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n    } else {\n      /* Reset Game Store content */\n      game.set(null);\n\n      /* Update Dashboard's game List */\n      dispatch('message', {\n        gameUrl: undefined,\n        updateGameList: true,\n      });\n    }\n  }\n\n  function flushError() {\n    error = null;\n  }\n</script>\n\n{#if !$game}\n  <div class=\"has-vcentered-content\">\n      <svg class=\"fa rotating\">\n        <use href=\"../images/fontawesome-sprite.svg#regular-sync-alt\" />\n      </svg>\n      <p class=\"left-spaced\">Loading Game Settings</p>\n    </div>\n{:else}\n  <form id=\"settings-form\" on:submit|preventDefault={handleUpdate}>\n    <div class=\"notification is-danger\" class:is-hidden={!error} >\n      <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n      <h1 class='title is-5'>\n        Unable to Update Game :\n      </h1>\n      <ul>\n        {#if error}\n          {#each Object.entries(error) as [ key, ar ]}\n            <li>{key} : {ar}</li>\n          {/each}\n        {/if}\n      </ul>\n    </div>\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Game Name\n      </label>\n      <div class=\"control\">\n        <input name=\"game[name]\" class=\"input reasonable-width\" type=\"text\"\n          value={$game['attributes']['name']}>\n      </div>\n    </div>\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Description\n      </label>\n      <div class=\"control\">\n        <input name=\"game[description]\" class=\"input\" type=\"text\"\n          value={$game['attributes']['description']}>\n      </div>\n      <p class=\"help\">Game and description won't be visible to your players.</p>\n    </div>\n\n    <button class=\"button is-link\">Update Settings</button>\n  </form>\n\n  <hr>\n\n  <h1 class=\"title is-4\">Danger Zone :</h1>\n  <form id=\"danger-form\" on:submit|preventDefault={handleDanger}>\n    <div class=\"field\">\n      <input name=\"game[archived]\" class=\"input\" type=\"hidden\"\n          value={!$game['attributes']['archived']}>\n      <button class=\"button is-danger is-outlined\"\n        class:is-hidden={$game.attributes.archived}>Archive this Game</button>\n      <button class=\"button is-danger is-outlined\"\n        class:is-hidden={!$game.attributes.archived}>Reactivate this Game</button>\n      <p class=\"help\">Once you archive a game, no player will be able to access it anymore. Please be certain!</p>\n    </div>\n  </form>\n\n  <div class=\"field\">\n    <button class=\"button is-danger is-outlined\" on:click|preventDefault={handleDestroy}>\n      Delete this Game\n    </button>\n    <p class=\"help\">Once you delete a game, there is no going back. Please be certain!</p>\n  </div>\n{/if}\n\n<style lang=scss>button.is-danger {\n  color: #cb2431 !important;\n  background: white !important;\n  border: 1px solid #cb2431 !important; }\n\n/*# sourceMappingURL=Settings.svelte.css.map */</style>"
  ],
  "names": [],
  "mappings": "AAsDmB,GAAG,aAAa,eAAC,CAAC,AACnC,SAAS,CAAE,MAAM,AAAE,CAAC;ACsBH,cAAc,8BAAC,CAAC,AACjC,mBAAmB,CAAE,IAAI,CACzB,OAAO,CAAE,KAAK,CAAC,CAAC,CAChB,YAAY,CAAE,KAAK,AAAE,CAAC,AACtB,6BAAc,CAAC,GAAG,eAAC,CAAC,AAClB,cAAc,CAAE,MAAM,AAAE,CAAC,AAC3B,6BAAc,CAAC,MAAM,eAAC,CAAC,AACrB,IAAI,CAAE,OAAO,AAAE,CAAC,AAClB,6BAAc,CAAC,OAAO,eAAC,CAAC,AACtB,IAAI,CAAE,OAAO,AAAE,CAAC,AAClB,6BAAc,CAAC,OAAO,eAAC,CAAC,AACtB,IAAI,CAAE,OAAO,AAAE,CAAC,AAEpB,iBAAiB,8BAAC,CAAC,AACjB,WAAW,CAAE,KAAK,AAAE,CAAC;ACpCJ,QAAQ,eAAC,CAAC,AAC3B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,AAAE,CAAC;AC8BG,oBAAoB,cAAC,CAAC,AACvC,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,KAAK,AAAE,CAAC,AAErB,YAAY,cAAC,CAAC,AACZ,WAAW,CAAE,KAAK,AAAE,CAAC;ACuBJ,SAAS,eAAC,CAAC,AAC5B,SAAS,CAAE,MAAM,AAAE,CAAC,AAEtB,UAAU,eAAC,CAAC,AACV,KAAK,CAAE,GAAG,AAAE,CAAC,AAEf,KAAK,eAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAAE,CAAC;ACsFA,YAAY,eAAC,CAAC,AAC/B,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,KAAK,AAAE,CAAC,AAEvB,EAAE,eAAC,CAAC,AACF,cAAc,CAAE,MAAM,AAAE,CAAC,AAE3B,EAAE,MAAM,eAAC,CAAC,AACR,UAAU,CAAE,KAAK,AAAE,CAAC,AAEtB,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,KAAK,CACb,WAAW,CAAE,KAAK,AAAE,CAAC,AAEvB,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,OAAO,AAAE,CAAC;ACrFH,MAAM,UAAU,eAAC,CAAC,AACjC,KAAK,CAAE,OAAO,CAAC,UAAU,CACzB,UAAU,CAAE,KAAK,CAAC,UAAU,CAC5B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,AAAE,CAAC"
}