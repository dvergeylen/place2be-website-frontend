{
  "version": 3,
  "file": "dashboard-components.css",
  "sources": [
    "../../Dashboard.svelte",
    "../../GameDetails.svelte",
    "../../GameList.svelte",
    "../../GameTabs.svelte",
    "../../NewGame.svelte",
    "../../Achievement.svelte",
    "../../Action.svelte",
    "../../Resource.svelte",
    "../../Settings.svelte",
    "../../AssetsForm.svelte",
    "../../AssetsIndex.svelte",
    "../../Conditions.svelte",
    "../../ActionTrigger.svelte",
    "../../UnlockedAchievement.svelte",
    "../../ActionTrigger.svelte",
    "../../TimeFrame.svelte",
    "../../UnlockedAchievement.svelte",
    "../../Relation.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { setContext } from 'svelte';\n  import { createUrl, fetchData } from '../../javascripts/utils/helpers';\n  import GameList from './GameList.svelte';\n  import NewGame from './NewGame.svelte';\n  import GameDetails from './GameDetails.svelte';\n  export let apiProtocol;\n  export let apiHost;\n  export let userId = undefined;\n  let gameList;\n  let gameUrl;\n\n  async function getUserGamesList(id) {\n    const url = createUrl(apiProtocol, apiHost, 'users', id, 'games');\n    const res = await fetchData(url);\n    const resJson = await res.json();\n    return resJson.data;\n  };\n\n  async function handleNewGameUrl(event) {\n    if (event.detail.updateGameList) {\n      gameList = await getUserGamesList(userId);\n    }\n    gameUrl = event.detail.gameUrl;\n  }\n\n  $: gameList = getUserGamesList(userId);\n  $: setContext('apiProtocol', apiProtocol);\n  $: setContext('apiHost', apiHost);\n  $: setContext('userId', userId);\n</script>\n\n\n <div class=\"columns\">\n  <div class=\"column is-2\">\n    <GameList {gameList} {gameUrl} on:message={handleNewGameUrl} />\n  </div>\n  <div class=\"column\">\n    <div id=\"feedback\" class=\"box\">\n      <p>\n        Place2Be.io is still at an early stage of development, with a very minimal set of features as we are mainly collecting feedback at this stage.<br />\n        We would\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#heart\" />\n        </svg>\n        to hear your thoughts on this! <a href=\"/feedback.html\">Give Feedback</a>\n      </p>\n    </div>\n    <div id=\"game-content\" class=\"box\">\n      {#if !gameUrl}\n        <p><span class=\"is-hidden-touch\">←</span><span class=\"is-hidden-desktop\">↑</span> Start by hitting the 'New Game' button !\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#party_popper\" />\n          </svg>\n        </p>\n      {:else if gameUrl === 'new'}\n        <NewGame on:message={handleNewGameUrl} />\n      {:else}\n        <GameDetails {gameUrl} on:message={handleNewGameUrl} />\n      {/if}\n    </div>\n  </div>\n</div>\n\n<style lang='scss'>div#game-content {\n  max-width: 1152px; }\n\ndiv#feedback {\n  max-width: 1152px;\n  margin: 0 0 1em 0;\n  background: #eefde2;\n  padding: 1em;\n  border-radius: 0.2em;\n  border: 2px solid #81e10b; }\n  div#feedback .twemoji {\n    vertical-align: middle; }\n\n/*# sourceMappingURL=Dashboard.svelte.css.map */</style>",
    "<script>\n  import { fade } from 'svelte/transition';\n  import { fetchData } from '../../javascripts/utils/helpers';\n  import { game } from '../../javascripts/stores/gameStore';\n  import { savingStatus, lastSaveDate } from '../../javascripts/stores/savingStore';\n  import GameTabs from './GameTabs.svelte';\n  import Overview from './Tabs/Overview.svelte';\n  import Collection from './Tabs/Collection.svelte';\n  import Stats from './Tabs/Stats.svelte';\n  import Dev from './Tabs/Dev.svelte';\n  import Settings from './Tabs/Settings.svelte';\n\n  export let gameUrl;\n  let error = null;\n  let selectedTab = 'achievements';\n  let collection;\n  const tabs = {\n    overview: Overview,\n    actions: Collection,\n    achievements: Collection,\n    resources: Collection,\n    stats: Stats,\n    dev: Dev,\n    settings: Settings,\n  }\n  const attributes = {\n    actions: {\n      name: {\n        singular: 'action',\n        plural: 'actions',\n      },\n      model: {\n        singular: 'Action',\n        plural: 'Actions',\n      }\n    },\n    achievements: {\n      name: {\n        singular: 'achievement',\n        plural: 'achievements',\n      },\n      model: {\n        singular: 'Achievement',\n        plural: 'Achievements',\n      }\n    },\n    resources: {\n      name: {\n        singular: 'resource',\n        plural: 'resources',\n      },\n      model: {\n        singular: 'Resource',\n        plural: 'Resources',\n      }\n    },\n  };\n\n  async function getGame(url) {\n    const res = await fetchData(url);\n    if (res.ok) {\n      const resJson = await res.json();\n      game.set(resJson);\n    } else {\n      error = 'Could not find the game you are looking for...';\n    }\n  }\n\n  function handleNewSelectedTab(event) {\n    selectedTab = event.detail.selectedTab;\n  }\n\n  // Update game Store when gameUrl is updated\n  $: getGame(gameUrl);\n  $: collection = $game && attributes[selectedTab] ?\n                  $game.included.filter((e) => e.type === attributes[selectedTab].name.singular)\n                                .sort((a, b) => parseInt(a.id) - parseInt(b.id)) :\n                  [];\n</script>\n\n{#if !error}\n  {#if !$game}\n    <h1 class=\"title is-4 has-vcentered-content\">\n      Loading Game...\n    </h1>\n  {:else}\n    <h1 class=\"title is-4 has-vcentered-content\">\n      <span id=\"saving-status\">\n        <abbr title=\"Last save : {$lastSaveDate.toLocaleString()}\">\n          <svg class=\"fa saved\" class:is-hidden={$savingStatus != 'saved'}\n            transition:fade=\"{{delay: 250, duration: 300}}\">\n            <use href=\"../images/fontawesome-sprite.svg#solid-check-circle\" />\n          </svg>\n          <svg class=\"fa saving rotating\" class:is-hidden={$savingStatus != 'saving'}\n            transition:fade=\"{{delay: 250, duration: 300}}\">\n            <use href=\"../images/fontawesome-sprite.svg#solid-spinner-third\" />\n          </svg>\n          <svg class=\"fa failed\" class:is-hidden={$savingStatus != 'failed'}\n            transition:fade=\"{{delay: 250, duration: 300}}\">\n            <use href=\"../images/fontawesome-sprite.svg#solid-times-circle\" />\n          </svg>\n        </abbr>\n      </span>\n      {$game.data.attributes.name}\n    </h1>\n    <h1 id=\"game-description\" class=\"subtitle is-6\">{$game.data.attributes.description}</h1>\n\n    <GameTabs {selectedTab} on:message={handleNewSelectedTab} />\n    <svelte:component this={tabs[selectedTab]}\n      attributes={attributes[selectedTab]}\n      {collection}\n      on:message/>\n  {/if}\n{:else}\n  <div class=\"notification is-warning\" class:is-hidden={!error}>\n    <p>Could not load the game you are looking for...</p>\n  </div>\n{/if}\n\n<style lang=\"scss\">#saving-status {\n  border-bottom-style: none;\n  padding: 0.5em 0;\n  margin-right: 0.5em; }\n  #saving-status svg {\n    vertical-align: middle; }\n  #saving-status .saved {\n    fill: #73c90a; }\n  #saving-status .saving {\n    fill: #b1b1b1; }\n  #saving-status .failed {\n    fill: darkred; }\n\n#game-description {\n  margin-left: 2.3em; }\n\n/*# sourceMappingURL=GameDetails.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  export let gameList;\n  export let gameUrl;\n\n  const dispatch = createEventDispatcher();\n\n  function updateGameUrl(url) {\n    dispatch('message', {\n      gameUrl: url,\n    });\n  }\n</script>\n\n<div class=\"content\">\n  {#await gameList}\n    <div class=\"has-vcentered-content\">\n      <svg class=\"fa rotating\">\n        <use href=\"../images/fontawesome-sprite.svg#regular-sync-alt\" />\n      </svg>\n      <p class=\"left-spaced\">Loading Game List</p>\n    </div>\n  {:then games}\n    <article class=\"panel is-primary\">\n      <p class=\"panel-heading\">\n        Your Games :\n      </p>\n      <label class=\"panel-block fill-primary\"\n        on:click|preventDefault={async () => updateGameUrl('new')}>\n        <span class=\"panel-icon\">\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#rocket\" />\n          </svg>\n        </span>\n        <span>\n          New Game\n        </span>\n      </label>\n      {#each games as game}\n        <label on:click|preventDefault={() => updateGameUrl(game.links.self)}\n          class=\"panel-block\">\n          <span class=\"panel-icon\" class:fill-primary={gameUrl === game.links.self}>\n            <svg class=\"twemoji\">\n              <use href=\"../images/twemoji-sprite.svg#trophy\" />\n            </svg>\n          </span>\n          {game.attributes.name}\n        </label>\n      {/each}\n    </article>\n  {:catch error}\n    <p class=\"error\">{error.message}</p>\n  {/await}\n</div>\n\n<style lang='scss'>.twemoji {\n  width: 1.2em;\n  height: 1em; }\n\n/*# sourceMappingURL=GameList.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { game } from '../../javascripts/stores/gameStore';\n  export let selectedTab = 'overview';\n\n  const dispatch = createEventDispatcher();\n\n  function updateSelectedTab(selectedTab) {\n    dispatch('message', {\n      selectedTab,\n    });\n  }\n</script>\n\n\n<div id=\"game-tabs-container\" class=\"tabs\">\n  <ul>\n    <li class:is-active={selectedTab === 'overview'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('overview')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#compass\" />\n        </svg>\n        <span class=\"left-spaced\">Overview</span>\n      </a>\n    </li>\n    <li class:is-active={selectedTab === 'actions'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('actions')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#high_voltage_sign\" />\n        </svg>\n        <span class=\"left-spaced\">Actions</span>\n      </a>\n    </li>\n    <li class:is-active={selectedTab === 'achievements'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('achievements')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#trophy\" />\n        </svg>\n        <span class=\"left-spaced\">Achievements</span>\n      </a>\n    </li>\n    <li class:is-active={selectedTab === 'resources'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('resources')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#sparkles\" />\n        </svg>\n        <span class=\"left-spaced\">Resources</span>\n      </a>\n    </li>\n    <li class:is-active={selectedTab === 'stats'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('stats')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#bar_chart\" />\n        </svg>\n        <span class=\"left-spaced\">Stats</span>\n      </a>\n    </li>\n    <li class:is-active={selectedTab === 'dev'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('dev')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#woman_technologist\" />\n        </svg>\n        <span class=\"left-spaced\">Integration</span>\n      </a>\n    </li>\n    <li class:is-active={selectedTab === 'settings'}>\n      <a href=\"javascript:void(0)\"\n        on:click|preventDefault={() => updateSelectedTab('settings')}>\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#gear\" />\n        </svg>\n        <span class=\"left-spaced\">Settings</span>\n      </a>\n    </li>\n  </ul>\n</div>\n\n<style lang='scss'>#game-tabs-container {\n  margin-top: 1em;\n  margin-bottom: 1em;\n  font-size: 1.1em; }\n\n.left-spaced {\n  margin-left: 0.5em; }\n\n/*# sourceMappingURL=GameTabs.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher } from 'svelte';\n  import { createUrl, postFormData } from '../../javascripts/utils/helpers';\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  let error = null;\n\n  async function handleSubmit() {\n    const url = createUrl(apiProtocol, apiHost, 'users', userId, 'games');\n    const formData = new FormData(document.getElementById('new-game-form'));\n    const res = await postFormData(url, formData);\n\n    if (!res.ok) {\n      const responseBody = await res.text();\n      error = JSON.parse(responseBody);\n    } else {\n      const responseBody = await res.json();\n\n      /* Update Dashboard's new gameUrl to display */\n      dispatch('message', {\n        gameUrl: responseBody.data.links.self,\n        updateGameList: true,\n      });\n    }\n  }\n\n  function cancel() {\n    /* Update Dashboard's new gameUrl to display */\n    dispatch('message', {\n      gameUrl: undefined,\n    });\n  }\n\n  function flushError() {\n    error = null;\n  }\n</script>\n\n\n<div id=\"new-game\">\n  <h1 class=\"title is-4\">\n    Create new Game :\n  </h1>\n  <p>A Game contains all Actions\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#high_voltage_sign\" />\n    </svg>,\n    Achievements\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#trophy\" />\n    </svg>,\n    Resources\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#sparkles\" />\n    </svg>\n    and Assets\n    <svg class=\"twemoji\">\n      <use href=\"../images/twemoji-sprite.svg#package\" />\n    </svg>\n    your players can interact with.</p>\n\n  <hr>\n\n  <form id=\"new-game-form\" on:submit|preventDefault={handleSubmit}>\n    <div class=\"notification is-danger\" class:is-hidden={!error} >\n      <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n      <h1 class='title is-5'>\n        Unable to Create new Game :\n      </h1>\n      <ul>\n        {#if error}\n          {#each Object.entries(error) as [ key, ar ]}\n            <li>{key} : {ar}</li>\n          {/each}\n        {/if}\n      </ul>\n    </div>\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Game Name\n        <span class=\"mandatory\">*</span>\n      </label>\n      <div class=\"control\">\n        <input name=\"game[name]\" class=\"input reasonable-width\" type=\"text\">\n      </div>\n    </div>\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Description\n        <span class=\"note\">(optional)</span>\n      </label>\n      <div class=\"control\">\n        <input name=\"game[description]\" class=\"input\" type=\"text\">\n      </div>\n      <p class=\"help\">Game and description won't be visible to your players.</p>\n    </div>\n\n    <div class=\"field is-grouped\">\n      <div class=\"control\">\n        <button class=\"button is-link\">Create</button>\n      </div>\n      <div class=\"control\">\n        <button class=\"button is-link is-light\" on:click|preventDefault={() => cancel()}>Cancel</button>\n      </div>\n    </div>\n  </form>\n</div>\n\n\n\n<style lang=\"scss\">#new-game {\n  max-width: 1000px; }\n\n.mandatory {\n  color: red; }\n\n/*# sourceMappingURL=NewGame.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher, onDestroy } from 'svelte';\n  import { fade } from 'svelte/transition';\n  import { createUrl } from '../../../../javascripts/utils/helpers';\n  import { fetchData, postFormData } from '../../../../javascripts/utils/helpers';\n  import Relation from '../SharedComps/Relation/Relation.svelte';\n  import AssetsIndex from '../SharedComps/Assets/AssetsIndex.svelte';\n  import AssetsForm from '../SharedComps/Assets/AssetsForm.svelte';\n  import { game } from '../../../../javascripts/stores/gameStore';\n  import { savingStatus } from '../../../../javascripts/stores/savingStore';\n\n  export let achievement = {\n    attributes: {\n      assets: [\n        {\n          key: '',\n          tuples: [\n            {\n              namespaces: $game.data.attributes.namespaces,\n              value: '',\n            },\n          ],\n        },\n      ],\n    },\n  };\n  let relation;\n  let isExpandedSection = {\n    conditions: false,\n    rewards: false,\n    assets: false,\n  }\n  let displayEditForm = false;\n  let displaySavedStatus = false;\n  let displaySavedStatusTimeout;\n  let error = null;\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  function updateRelation(event) {\n    relation = event.detail.relation;\n  }\n\n  async function saveAchievement() {\n    savingStatus.set('saving');\n    let path, method;\n\n    if (achievement.id) {\n      path = ['users', userId, 'games', $game.data.id, 'achievements', achievement.id];\n      method = 'PUT';\n    } else {\n      path = ['users', userId, 'games', $game.data.id, 'achievements'];\n      method = 'POST';\n    }\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const formData = new FormData(document.getElementById(`${achievement.id || 'new'}-achievement-form`));\n    const res = await postFormData(url, formData, method);\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n      resetFormDisplay();\n      displaySavedBanner();\n\n      /* Dispatch new/updated achievement to Collection's list */\n      const updatedAchievement = await res.json();\n      dispatch('updateCollection', {\n        achievement: updatedAchievement.data,\n        included: updatedAchievement.included,\n        deprecatedIncludedIds:\n          updatedAchievement.included.map((o) => `${o.type}#${o.id}`)\n            .concat([`achievement#${updatedAchievement.data.id}`]),\n      });\n    }\n  }\n\n  async function destroyAchievement() {\n    savingStatus.set('saving');\n    const path = ['users', userId, 'games', $game.data.id, 'achievements', achievement.id];\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await postFormData(url, {}, 'DELETE');\n\n    if (res.status !== 204) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n      error = null;\n\n      /* Update actions list */\n      dispatch('removeCollectionMember', {\n        achievement: {\n          id: achievement.id,\n        },\n      });\n    }\n  }\n\n  async function resetAchievement() {\n    let path, method;\n    path = ['users', userId, 'games', $game.data.id, 'achievements', achievement.id];\n\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await fetchData(url);\n\n    if (res.ok) {\n      const updatedAchievement = await res.json();\n      dispatch('updateCollection', {\n        achievement: updatedAchievement.data,\n        included: [],\n        deprecatedIncludedIds: [`achievement#${updatedAchievement.data.id}`],\n      });\n    }\n    resetFormDisplay();\n  }\n\n  function resetFormDisplay() {\n    displayEditForm = false;\n  }\n\n  function toggleFormDisplay() {\n    displayEditForm = !displayEditForm;\n  }\n\n  function toggleSection(key, value) {\n    isExpandedSection[key] = value;\n  }\n\n  function displaySavedBanner() {\n    displaySavedStatus = true;\n    displaySavedStatusTimeout = setTimeout(() => {\n      displaySavedStatus = false;\n    }, 1000);\n  }\n\n  function flushError() {\n    error = null;\n  }\n\n  onDestroy(() => {\n    clearTimeout(displaySavedStatusTimeout);\n  });\n\n  // TODO: replace with conditional chaining support:\n  // https://github.com/sveltejs/svelte/commit/2450dd1ff08491739f124bcdf5131a2e7af52bcb\n  // not released on svelte at this time of writing.\n  $: relation = achievement.relationships &&\n             achievement.relationships.relation.data &&\n             $game.included.find((e) => (\n    e.id === achievement.relationships.relation.data.id &&\n    e.type === achievement.relationships.relation.data.type\n  ));\n</script>\n\n\n\n<div class='item-box'>\n  {#if !displayEditForm && achievement.id}\n    <div class=\"columns is-mobile\">\n      <div class=\"column\">\n        <h1 class=\"title is-4 has-vcentered-text item-name\">\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#trophy\" />\n          </svg>\n          <span class:is-hidden={displayEditForm}>\n            {achievement.attributes.name}\n          </span>\n          <svg class=\"fa item-edit fill-primary no-hover\" class:is-hidden={displayEditForm}\n            on:click={toggleFormDisplay}>\n            <use href=\"../images/fontawesome-sprite.svg#regular-edit\" />\n          </svg>\n        </h1>\n      </div>\n    </div>\n\n    {#if displaySavedStatus}\n      <div class=\"columns\" out:fade=\"{{delay: 2000, duration: 200}}\">\n        <div class=\"column is-12 saved-collection\">\n          <svg class=\"fa saved\">\n            <use href=\"../images/fontawesome-sprite.svg#solid-check-circle\" />\n          </svg>\n          Updated !\n        </div>\n      </div>\n    {/if}\n\n\n    <h1 class=\"title is-5 byproduct-title\"\n      class:is-disabled={!relation}>\n      <svg class=\"chevron\" on:click={() => toggleSection('conditions', true)}\n        class:is-hidden={isExpandedSection.conditions}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-right\" />\n      </svg>\n      <svg class=\"chevron\" on:click={() => toggleSection('conditions', false)}\n        class:is-hidden={!isExpandedSection.conditions}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-down\" />\n      </svg>\n      <svg class=\"twemoji\">\n        <use href=\"../images/twemoji-sprite.svg#twisted_rightwards_arrows\" />\n      </svg>\n      Conditions\n      {#if relation}\n        <span class=\"quantity\">({relation.relationships.conditions.data.length})</span>\n      {/if}\n    </h1>\n    {#if isExpandedSection.conditions}\n      {#if relation !== null}\n       <Relation\n        {relation}\n        formPrefix={undefined} />\n      {:else}\n        <p class=\"no-conditions\">\n          No conditions yet\n        </p>\n      {/if}\n    {/if}\n\n\n    <h1 class=\"title is-5 byproduct-title\">\n      <svg class=\"chevron\" on:click={() => toggleSection('rewards', true)}\n        class:is-hidden={isExpandedSection.rewards}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-right\" />\n      </svg>\n      <svg class=\"chevron\" on:click={() => toggleSection('rewards', false)}\n        class:is-hidden={!isExpandedSection.rewards}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-down\" />\n      </svg>\n      <svg class=\"twemoji\">\n        <use href=\"../images/twemoji-sprite.svg#wrapped_present\" />\n      </svg>\n      Rewards <span class=\"note\">(optional)</span>\n    </h1>\n    <div class:is-hidden={!isExpandedSection.rewards}>\n      <p>TODO</p>\n    </div>\n\n\n\n\n    <h1 class=\"title is-5 byproduct-title\"\n      class:is-disabled={!achievement.attributes.assets.length}>\n      <svg class=\"chevron\" on:click={() => toggleSection('assets', true)}\n        class:is-hidden={isExpandedSection.assets}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-right\" />\n      </svg>\n      <svg class=\"chevron\" on:click={() => toggleSection('assets', false)}\n        class:is-hidden={!isExpandedSection.assets}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-down\" />\n      </svg>\n      <svg class=\"twemoji\">\n        <use href=\"../images/twemoji-sprite.svg#package\" />\n      </svg>\n      Assets\n      {#if achievement.attributes.assets.length}\n        <span class=\"quantity\">({achievement.attributes.assets.length})</span>\n      {/if}\n    </h1>\n\n    {#if isExpandedSection.assets}\n      {#if achievement.attributes.assets.length}\n        <AssetsIndex assets={achievement.attributes.assets} />\n      {:else}\n        <p class=\"no-conditions\">\n          No assets yet\n        </p>\n      {/if}\n    {/if}\n  {/if}\n\n\n\n\n  <!-- Edit Achievement -->\n  {#if displayEditForm || !achievement.id}\n    <form id=\"{achievement.id || 'new'}-achievement-form\"\n        on:submit|preventDefault={saveAchievement}>\n\n      <div class=\"notification is-danger\" class:is-hidden={!error} >\n        <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n        <h1 class='title is-5'>\n          Unable to Update Achievement :\n        </h1>\n        <ul>\n          {#if error}\n            {#each Object.entries(error) as [ key, ar ]}\n              <li>{key} : {ar}</li>\n            {/each}\n          {/if}\n        </ul>\n      </div>\n\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#card_file_box\" />\n        </svg>\n        Properties\n      </h1>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Name :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <input class=\"input reasonable-width\" type=\"text\" name=\"achievement[name]\"\n              bind:value={achievement.attributes.name} placeholder=\"Achievement name\">\n          </div>\n        </div>\n      </div>\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#twisted_rightwards_arrows\" />\n        </svg>\n        Conditions\n      </h1>\n      <div class=\"content\">\n        <ul class=\"help\">\n          <li>\n            An Achievement can only be unlocked once <em>per Player</em>.\n          </li>\n          <li>\n            Set below the conditions Players need to meet to unlock the Achievement.\n          </li>\n          <li>\n            Depending on what you configure below, not ALL the conditions have to be met\n            for the Achievement to be granted.<br />\n            At least one condition has to be met and maximum all the conditions.\n          </li>\n          <li>\n            Make sure you have at least one condition of \"Action trigger\" type otherwise the\n            Achievement will never be hooked!\n          </li>\n        </ul>\n      </div>\n\n      {#if achievement.id && relation !== null}\n        <Relation \n          {relation}\n          formPrefix=\"achievement[relation_attributes]\"\n          on:message={updateRelation}/>\n      {:else}\n        <Relation formPrefix=\"achievement[relation_attributes]\"\n            on:message={updateRelation}/>\n      {/if}\n\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#wrapped_present\" />\n        </svg>\n        Rewards <span class=\"note\">(optional)</span>\n      </h1>\n      <div>\n        <p>TODO</p>\n      </div>\n\n\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#package\" />\n        </svg>\n        Assets\n        <span class=\"note\">(optional)</span>\n      </h1>\n      <div class=\"content\">\n        <ul class=\"help\">\n          <li>\n            Assets are key-value entries you can associate with an Achievement.\n          </li>\n          <li>\n            Everytime an Achievement will be involved, its associated assets will be returned as well.\n          </li>\n          <li>\n            You can have multiple assets per Achievement, carrying any information you want.\n          </li>\n          <li>\n            See assets\n            <a href=\"https://doc/place2be.io/assets\" target=\"_blank\">\n              <span>Doc</span>\n              <svg class=\"fa fill-primary no-hover\">\n                <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n              </svg>\n            </a>\n            for common use cases and examples.\n          </li>\n        </ul>\n      </div>\n\n      <AssetsForm assets={achievement.attributes.assets} formPrefix=\"achievement\"/>\n\n      <div class=\"columns is-vcentered\">\n        <div class=\"column is-narrow\">\n          <p class=\"help\">\n            Need help? See \n            <a href=\"https://doc/place2be.io/achievements\" target=\"_blank\">\n              <span>Doc</span>\n              <svg class=\"fa fill-primary no-hover\">\n                <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n              </svg>\n            </a>\n          </p>\n        </div>\n        <div class=\"column\">\n          <div class=\"buttons\">\n            <button class=\"button is-primary\">\n            {#if !achievement.id}\n              Create\n            {:else}\n              Update\n            {/if}\n            </button>\n            {#if achievement.id}\n              <button class=\"button is-primary is-light\"\n                on:click|preventDefault={resetAchievement}>\n                Cancel\n              </button>\n              <button class=\"button is-danger\"\n                on:click|preventDefault={destroyAchievement}>\n                Delete\n              </button>\n            {/if}\n          </div>\n        </div>\n      </div>\n    </form>\n  {/if}\n</div>\n\n<style lang=\"scss\">button.is-danger {\n  color: #cb2431 !important;\n  background: white !important;\n  border: 1px solid #cb2431 !important; }\n\n/*# sourceMappingURL=Achievement.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher, onDestroy } from 'svelte';\n  import { fade } from 'svelte/transition';\n  import { createUrl } from '../../../../javascripts/utils/helpers';\n  import { fetchData, postFormData } from '../../../../javascripts/utils/helpers';\n  import Relation from '../SharedComps/Relation/Relation.svelte';\n  import { game } from '../../../../javascripts/stores/gameStore';\n  import { savingStatus } from '../../../../javascripts/stores/savingStore';\n  export let action = {\n    attributes: {\n      name: '',\n      actionType: 'boolean',\n      tags: [],\n    }\n  };\n  let relation;\n  let isExpandedSection = {\n    conditions: false,\n  }\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  let error = null;\n  let displayEditForm = false;\n  let displaySavedStatus = false;\n  let displaySavedStatusTimeout;\n\n  function updateRelation(event) {\n    relation = event.detail.relation;\n  }\n\n  async function saveAction() {\n    savingStatus.set('saving');\n    let path, method;\n\n    if (action.id) {\n      path = ['users', userId, 'games', $game.data.id, 'actions', action.id];\n      method = 'PUT';\n    } else {\n      path = ['users', userId, 'games', $game.data.id, 'actions'];\n      method = 'POST';\n    }\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const formData = new FormData(document.getElementById(`${action.id || 'new'}-action-form`));\n    const res = await postFormData(url, formData, method);\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n      error = null;\n      resetFormDisplay();\n      displaySavedBanner();\n\n      /* Dispatch new/updated action to Collection's list */\n      const updatedAction = await res.json();\n      dispatch('updateCollection', {\n        action: updatedAction.data,\n        included: updatedAction.included,\n        deprecatedIncludedIds:\n          updatedAction.included.map((o) => `${o.type}#${o.id}`)\n            .concat([`action#${updatedAction.data.id}`]),\n      });\n    }\n  }\n\n  async function destroyAction() {\n    savingStatus.set('saving');\n    const path = ['users', userId, 'games', $game.data.id, 'actions', action.id];\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await postFormData(url, {}, 'DELETE');\n\n    if (res.status !== 204) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n\n      /* Update actions list */\n      dispatch('removeCollectionMember', {\n        action: {\n          id: action.id,\n        },\n      });\n    }\n  }\n\n  /* Reload the original Action Data if user hits the Cancel button */\n  async function resetAction() {\n    let path, method;\n    path = ['users', userId, 'games', $game.data.id, 'actions', action.id];\n\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await fetchData(url);\n\n    if (res.ok) {\n      const updatedAction = await res.json();\n      dispatch('updateCollection', {\n        action: updatedAction.data,\n        included: [],\n        deprecatedIncludedIds: [`action#${updatedAction.data.id}`],\n      });\n    }\n    resetFormDisplay();\n  }\n\n  function removeTag(tag) {\n    action = {\n      ...action,\n      attributes: {\n        ...action.attributes,\n        tags: action.attributes.tags.filter((t) => t !== tag),\n      },\n    };\n  }\n\n  function addTag(evt) {\n    const tag = evt.target.parentElement.querySelector('input.new-tag').value;\n    if (tag.length && !action.attributes.tags.includes(tag)) {\n      action = {\n        ...action,\n        attributes: {\n          ...action.attributes,\n          tags: [...action.attributes.tags, tag],\n        },\n      };\n    }\n  }\n\n  function valueTypePrettify(val) {\n    let result = 'Unknown';\n\n    switch(val) {\n      case 'boolean':\n        result = 'Boolean (Pass | Fail)';\n        break;\n      case 'int':\n        result = 'Integer';\n        break;\n      case 'float':\n        result = 'Float';\n        break;\n      case 'string':\n        result = 'String';\n    }\n    return result;\n  }\n\n  function teamIdPrettify(val) {\n    let result = 'Unknown';\n\n    switch(val) {\n      case false:\n        result = 'No, optional';\n        break;\n      case true:\n        result = 'Yes, required';\n    }\n    return result;\n  }\n\n  function toggleFormDisplay() {\n    displayEditForm = !displayEditForm;\n  }\n\n  function resetFormDisplay() {\n    displayEditForm = false;\n  }\n\n  function toggleSection(key, value) {\n    isExpandedSection[key] = value;\n  }\n\n  function displaySavedBanner() {\n    displaySavedStatus = true;\n    displaySavedStatusTimeout = setTimeout(() => {\n      displaySavedStatus = false;\n    }, 1000);\n  }\n\n  function flushError() {\n    error = null;\n  }\n\n  onDestroy(() => {\n    clearTimeout(displaySavedStatusTimeout);\n  });\n\n  // TODO: replace with conditional chaining support:\n  // https://github.com/sveltejs/svelte/commit/2450dd1ff08491739f124bcdf5131a2e7af52bcb\n  // not released on svelte at this time of writing.\n  $: relation = action.relationships &&\n             action.relationships.relation.data &&\n             $game.included.find((e) => (\n    e.id === action.relationships.relation.data.id &&\n    e.type === action.relationships.relation.data.type\n  ));\n</script>\n\n<div class='item-box'>\n\n  <!-- Show Action -->\n  <div class:is-hidden={displayEditForm || !action.id}>\n    <div class=\"columns is-mobile\">\n      <div class=\"column\">\n        <h1 class=\"title is-4 has-vcentered-text item-name\">\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#high_voltage_sign\" />\n          </svg>\n          <span class:is-hidden={displayEditForm}>\n            {action.attributes.name}\n          </span>\n          <svg class=\"fa item-edit fill-primary no-hover\" class:is-hidden={displayEditForm}\n            on:click={toggleFormDisplay}>\n            <use href=\"../images/fontawesome-sprite.svg#regular-edit\" />\n          </svg>\n        </h1>\n      </div>\n    </div>\n\n  {#if displaySavedStatus}\n    <div class=\"columns\" out:fade=\"{{delay: 2000, duration: 200}}\">\n      <div class=\"column is-12 saved-collection\">\n        <svg class=\"fa saved\">\n          <use href=\"../images/fontawesome-sprite.svg#solid-check-circle\" />\n        </svg>\n        Updated !\n      </div>\n    </div>\n  {/if}\n\n    <table class=\"table\">\n      <tbody>\n        <tr>\n          <td class=\"right\">\n            Score Type :\n          </td>\n          <td class=\"is-value\">\n            {valueTypePrettify(action.attributes.actionType)}\n          </td>\n        </tr>\n        <tr>\n          <td class=\"right\">\n            Team Id field :\n          </td>\n          <td class=\"is-value\">\n            {teamIdPrettify(action.attributes.team_required)}\n          </td>\n        </tr>\n        <tr>\n          <td class=\"right\">\n            Tags :\n          </td>\n          <td class=\"is-value\">\n            {#if !action.attributes.tags.length}\n              --\n            {:else}\n              <div class=\"tags\">\n                {#each action.attributes.tags as tag}\n                  <span class=\"tag is-link\">{tag}</span>\n                {/each}\n              </div>\n            {/if}\n          </td>\n        </tr>\n        <tr>\n          <td>\n          </td>\n          <td>\n            <p class=\"help\">\n              Need help? See \n              <a href=\"https://doc/place2be.io/actions\" target=\"_blank\">\n                <span>Doc</span>\n                <svg class=\"fa fill-primary no-hover\">\n                  <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n                </svg>\n              </a>\n            </p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h1 class=\"title is-5 byproduct-title\">\n      <svg class=\"chevron\" on:click={() => toggleSection('conditions', true)}\n        class:is-hidden={isExpandedSection.conditions}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-right\" />\n      </svg>\n      <svg class=\"chevron\" on:click={() => toggleSection('conditions', false)}\n        class:is-hidden={!isExpandedSection.conditions}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-down\" />\n      </svg>\n      <svg class=\"twemoji\">\n        <use href=\"../images/twemoji-sprite.svg#twisted_rightwards_arrows\" />\n      </svg>\n      Conditions\n    </h1>\n    {#if isExpandedSection.conditions}\n      {#if relation !== null}\n       <Relation\n        {relation}\n        formPrefix={undefined} />\n      {:else}\n        <p class=\"no-conditions\">\n          No conditions yet\n        </p>\n      {/if}\n    {/if}\n  </div>\n\n  <!-- Edit Action -->\n  <div class:is-hidden={!displayEditForm && action.id}>\n    <form id=\"{action.id || 'new'}-action-form\"\n      on:submit|preventDefault={saveAction}>\n\n      <div class=\"notification is-danger\" class:is-hidden={!error} >\n        <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n        <h1 class='title is-5'>\n          Unable to Update Action :\n        </h1>\n        <ul>\n          {#if error}\n            {#each Object.entries(error) as [ key, ar ]}\n              <li>{key} : {ar}</li>\n            {/each}\n          {/if}\n        </ul>\n      </div>\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#card_file_box\" />\n        </svg>\n        Properties :\n      </h1>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Name :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <input class=\"input reasonable-width\" type=\"text\" name=\"act[name]\"\n              bind:value={action.attributes.name} placeholder=\"Action name\">\n          </div>\n        </div>\n      </div>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Score Type :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <div class=\"select\">\n              <select name=\"act[action_type]\" bind:value={action.attributes.actionType}>\n                <option value='boolean'>Boolean (Pass | Fail)</option>\n                <option value='int'>Integer</option>\n                <option value='float'>Float</option>\n                <option value='string'>String</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Team Id field :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <div class=\"select\">\n              <select name=\"act[team_required]\" bind:value={action.attributes.team_required}>\n                <option value=\"false\">No, optional</option>\n                <option value=\"true\">Yes, required</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Tags :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <div class=\"field is-grouped is-grouped-multiline has-vcentered-content\">\n              {#each action.attributes.tags as tag, i (i)}\n                <div class=\"control\">\n                  <input name=\"act[tags][]\" class=\"input\" type=\"hidden\"\n                    value={tag}>\n                  <div class=\"tags has-addons\">\n                    <span class=\"tag is-info\">\n                      {tag}\n                    </span>\n                    <span class=\"tag is-delete\" on:click={() => removeTag(tag)}>\n                    </span>\n                  </div>\n                </div>\n              {/each}\n                <input class=\"input is-small new-tag\" type=\"text\"\n                  placeholder=\"New tag\">\n                <button class=\"button is-primary is-outlined is-small\"\n                  on:click|preventDefault={addTag}>\n                  Add\n                </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#twisted_rightwards_arrows\" />\n        </svg>\n        Conditions\n      </h1>\n      <div class=\"content\">\n        <ul class=\"help\">\n          <li>\n            An Action can only be triggered multiple times per Player.\n          </li>\n          <li>\n            Set below the conditions Players need to succeed triggering the Action.\n          </li>\n          <li>\n            Depending on what you configure below, not ALL the conditions have to be met\n            for the Achievement to be granted.<br />\n            At least one condition has to be met and maximum all the conditions.\n          </li>\n        </ul>\n      </div>\n\n      {#if action.id && relation !== null}\n        <Relation \n          {relation}\n          formPrefix=\"act[relation_attributes]\"\n          on:message={updateRelation}/>\n      {:else}\n        <Relation formPrefix=\"act[relation_attributes]\"\n            on:message={updateRelation}/>\n      {/if}\n\n      <div class=\"columns is-vcentered mt-3\">\n        <div class=\"column is-narrow\">\n          <p class=\"help\">\n            Need help? See \n            <a href=\"https://doc/place2be.io/actions\" target=\"_blank\">\n              <span>Doc</span>\n              <svg class=\"fa fill-primary no-hover\">\n                <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n              </svg>\n            </a>\n          </p>\n        </div>\n        <div class=\"column\">\n          <div class=\"buttons\">\n            <button class=\"button is-primary\">\n            {#if !action.id}\n              Create\n            {:else}\n              Update\n            {/if}\n            </button>\n            {#if action.id}\n              <button class=\"button is-primary is-light\"\n                on:click|preventDefault={resetAction}>\n                Cancel\n              </button>\n              <button class=\"button is-danger\"\n                on:click|preventDefault={destroyAction}>\n                Delete\n              </button>\n            {/if}\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n\n\n<style lang='scss'>input.new-tag {\n  max-width: 200px;\n  margin-right: 1em; }\n\ntd {\n  vertical-align: middle; }\n\ntd.right {\n  text-align: right; }\n\ntd.is-value {\n  color: gray;\n  font-style: italic; }\n\nbutton.is-danger {\n  color: #cb2431 !important;\n  background: white !important;\n  border: 1px solid #cb2431 !important; }\n\n/*# sourceMappingURL=Action.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher, onDestroy } from 'svelte';\n  import { fade } from 'svelte/transition';\n  import { createUrl } from '../../../../javascripts/utils/helpers';\n  import { fetchData, postFormData } from '../../../../javascripts/utils/helpers';\n  import AssetsIndex from '../SharedComps/Assets/AssetsIndex.svelte';\n  import AssetsForm from '../SharedComps/Assets/AssetsForm.svelte';\n  import { game } from '../../../../javascripts/stores/gameStore';\n  import { savingStatus } from '../../../../javascripts/stores/savingStore';\n  export let resource = {\n    attributes: {\n      name: '',\n      source: 'virtual',\n      assets: [\n        {\n          key: '',\n          tuples: [\n            {\n              namespaces: $game.data.attributes.namespaces,\n              value: '',\n            },\n          ],\n        },\n      ],\n    }\n  };\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  let error = null;\n  let displayEditForm = false;\n  let displaySavedStatus = false;\n  let displaySavedStatusTimeout;\n  let isExpandedSection = {\n    assets: false,\n  };\n\n  async function saveResource() {\n    savingStatus.set('saving');\n    let path, method;\n\n    if (resource.id) {\n      path = ['users', userId, 'games', $game.data.id, 'resources', resource.id];\n      method = 'PUT';\n    } else {\n      path = ['users', userId, 'games', $game.data.id, 'resources'];\n      method = 'POST';\n    }\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const formData = new FormData(document.getElementById(`${resource.id || 'new'}-resource-form`));\n    const res = await postFormData(url, formData, method);\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n      resetFormDisplay();\n      displaySavedBanner();\n\n      /* Dispatch new/updated action to Collection's list */\n      const updatedResource = await res.json();\n      dispatch('updateCollection', {\n        resource: updatedResource.data,\n        included: [],\n        deprecatedIncludedIds: [`resource#${updatedResource.data.id}`],\n      });\n    }\n  }\n\n  async function destroyResource() {\n    savingStatus.set('saving');\n    const path = ['users', userId, 'games', $game.data.id, 'resources', resource.id];\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await postFormData(url, {}, 'DELETE');\n\n    if (res.status !== 204) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n      error = null;\n\n      /* Update resources list */\n      dispatch('removeCollectionMember', {\n        resource: {\n          id: resource.id,\n        },\n      });\n    }\n  }\n\n  /* Reload the original Resource Data if user hits the Cancel button */\n  async function resetResource() {\n    let path, method;\n    path = ['users', userId, 'games', $game.data.id, 'resources', resource.id];\n\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await fetchData(url);\n\n    if (res.ok) {\n      const updatedResource = await res.json();\n      dispatch('updateCollection', {\n        resource: updatedResource.data,\n        included: [],\n        deprecatedIncludedIds: [`resource#${updatedResource.data.id}`],\n      });\n    }\n    resetFormDisplay();\n  }\n\n  function sourcePrettify(val) {\n    let result = 'Unknown';\n\n    switch(val) {\n      case 'virtual':\n        result = 'Virtual money';\n        break;\n      case 'list':\n        result = 'CSV List';\n        break;\n      case 'uri':\n        result = 'External URI';\n        break;\n      case 'scheme':\n        result = 'Scheme';\n    }\n    return result;\n  }\n\n  function toggleFormDisplay() {\n    displayEditForm = !displayEditForm;\n  }\n\n  function resetFormDisplay() {\n    displayEditForm = false;\n  }\n\n  function toggleSection(key, value) {\n    isExpandedSection[key] = value;\n  }\n\n  function displaySavedBanner() {\n    displaySavedStatus = true;\n    displaySavedStatusTimeout = setTimeout(() => {\n      displaySavedStatus = false;\n    }, 1000);\n  }\n\n  function flushError() {\n    error = null;\n  }\n\n  onDestroy(() => {\n    clearTimeout(displaySavedStatusTimeout);\n  });\n</script>\n\n\n<div class='item-box'>\n\n  <!-- Show Resource -->\n  <div class:is-hidden={displayEditForm || !resource.id}>\n    <div class=\"columns is-mobile\">\n      <div class=\"column\">\n        <h1 class=\"title is-4 has-vcentered-text item-name\">\n          <svg class=\"twemoji\">\n            <use href=\"../images/twemoji-sprite.svg#white_medium_star\" />\n          </svg>\n          <span class:is-hidden={displayEditForm}>\n            {resource.attributes.name}\n          </span>\n          <svg class=\"fa item-edit fill-primary no-hover\" class:is-hidden={displayEditForm}\n            on:click={toggleFormDisplay}>\n            <use href=\"../images/fontawesome-sprite.svg#regular-edit\" />\n          </svg>\n        </h1>\n      </div>\n    </div>\n\n    {#if displaySavedStatus}\n      <div class=\"columns\" out:fade=\"{{delay: 2000, duration: 200}}\">\n        <div class=\"column is-12 saved-collection\">\n          <svg class=\"fa saved\">\n            <use href=\"../images/fontawesome-sprite.svg#solid-check-circle\" />\n          </svg>\n          Updated !\n        </div>\n      </div>\n    {/if}\n\n    <table class=\"table\">\n      <tbody>\n        <tr>\n          <td class=\"right\">\n            Source Type :\n          </td>\n          <td class=\"is-value\">\n            {sourcePrettify(resource.attributes.source)}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h1 class=\"title is-5 byproduct-title\"\n      class:is-disabled={!resource.attributes.assets.length}>\n      <svg class=\"chevron\" on:click={() => toggleSection('assets', true)}\n        class:is-hidden={isExpandedSection.assets}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-right\" />\n      </svg>\n      <svg class=\"chevron\" on:click={() => toggleSection('assets', false)}\n        class:is-hidden={!isExpandedSection.assets}>\n        <use href=\"../images/fontawesome-sprite.svg#solid-chevron-double-down\" />\n      </svg>\n      <svg class=\"twemoji\">\n        <use href=\"../images/twemoji-sprite.svg#package\" />\n      </svg>\n      Assets\n      {#if resource.attributes.assets.length}\n        <span class=\"quantity\">({resource.attributes.assets.length})</span>\n      {/if}\n    </h1>\n\n    {#if isExpandedSection.assets}\n      {#if resource.attributes.assets.length}\n        <AssetsIndex assets={resource.attributes.assets} />\n      {:else}\n        <p class=\"no-conditions\">\n          No assets yet\n        </p>\n      {/if}\n    {/if}\n\n\n    <p class=\"help\">\n      Need help? See \n      <a href=\"https://doc/place2be.io/resources\" target=\"_blank\">\n        <span>Doc</span>\n        <svg class=\"fa fill-primary no-hover\">\n          <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n        </svg>\n      </a>\n    </p>\n  </div>\n\n\n\n\n\n\n\n\n\n  <!-- Edit Resource -->\n  <div class:is-hidden={!displayEditForm && resource.id}>\n    <form id=\"{resource.id || 'new'}-resource-form\"\n      on:submit|preventDefault={saveResource}>\n\n      <div class=\"notification is-danger\" class:is-hidden={!error} >\n        <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n        <h1 class='title is-5'>\n          Unable to Update Resource :\n        </h1>\n        <ul>\n          {#if error}\n            {#each Object.entries(error) as [ key, ar ]}\n              <li>{key} : {ar}</li>\n            {/each}\n          {/if}\n        </ul>\n      </div>\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#card_file_box\" />\n        </svg>\n        Properties\n      </h1>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Name :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <input class=\"input reasonable-width\" type=\"text\" name=\"resource[name]\"\n              bind:value={resource.attributes.name} placeholder=\"Resource name\">\n          </div>\n        </div>\n      </div>\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Source Type :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"select\">\n            <select name=\"resource[source]\" bind:value={resource.attributes.source}>\n              <option value='virtual'>Virtual money</option>\n              <option value='list' disabled='disabled'>CSV List</option>\n              <option value='uri' disabled='disabled'>External URI</option>\n              <option value='scheme' disabled='disabled'>Scheme</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n\n      <h1 class=\"title is-5 byproduct-title\">\n        <svg class=\"twemoji\">\n          <use href=\"../images/twemoji-sprite.svg#package\" />\n        </svg>\n        Assets\n        <span class=\"note\">(optional)</span>\n      </h1>\n      <div class=\"content\">\n        <ul class=\"help\">\n          <li>\n            Assets are key-value entries you can associate with a Resource.\n          </li>\n          <li>\n            Everytime a Resource will be involved, its associated assets will be returned as well.\n          </li>\n          <li>\n            You can have multiple assets per Resource, carrying any information you want.\n          </li>\n          <li>\n            See assets\n            <a href=\"https://doc/place2be.io/assets\" target=\"_blank\">\n              <span>Doc</span>\n              <svg class=\"fa fill-primary no-hover\">\n                <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n              </svg>\n            </a>\n            for common use cases and examples.\n          </li>\n        </ul>\n      </div>\n\n      <AssetsForm assets={resource.attributes.assets} formPrefix=\"resource\"/>\n\n      <div class=\"columns is-vcentered\">\n        <div class=\"column is-narrow\">\n          <p class=\"help\">\n            Need help? See \n            <a href=\"https://doc/place2be.io/resources\" target=\"_blank\">\n              <span>Doc</span>\n              <svg class=\"fa fill-primary no-hover\">\n                <use href=\"../images/fontawesome-sprite.svg#regular-external-link-square\" />\n              </svg>\n            </a>\n          </p>\n        </div>\n        <div class=\"column\">\n          <div class=\"buttons\">\n            <button class=\"button is-primary\">\n            {#if !resource.id}\n              Create\n            {:else}\n              Update\n            {/if}\n            </button>\n            {#if resource.id}\n              <button class=\"button is-primary is-light\"\n                on:click|preventDefault={resetResource}>\n                Cancel\n              </button>\n              <button class=\"button is-danger\"\n                on:click|preventDefault={destroyResource}>\n                Delete\n              </button>\n            {/if}\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n\n\n<style lang='scss'>.right {\n  text-align: right; }\n\n.is-value {\n  color: gray;\n  font-style: italic;\n  word-break: break-all; }\n\nbutton.is-danger {\n  color: #cb2431 !important;\n  background: white !important;\n  border: 1px solid #cb2431 !important; }\n\n/*# sourceMappingURL=Resource.svelte.css.map */</style>",
    "<script>\n  import { getContext, createEventDispatcher } from 'svelte';\n  import { createUrl } from '../../../javascripts/utils/helpers';\n  import { postFormData } from '../../../javascripts/utils/helpers';\n  import { game } from '../../../javascripts/stores/gameStore';\n  import { savingStatus } from '../../../javascripts/stores/savingStore';\n  let error = null;\n\n  const dispatch = createEventDispatcher();\n  const apiProtocol = getContext('apiProtocol');\n  const apiHost = getContext('apiHost');\n  const userId = getContext('userId');\n\n  async function handleSubmit(path, formId) {\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const formData = new FormData(document.getElementById(formId));\n\n    savingStatus.set('saving');\n    const res = await postFormData(url, formData, 'PUT');\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n      savingStatus.set('failed');\n    } else {\n      savingStatus.set('saved');\n\n      /* Update Game Store with new content */\n      const newGame = await res.json();\n      game.set(newGame);\n\n      /* Update Dashboard's game List */\n      dispatch('message', {\n        gameUrl: newGame.data.links.self,\n        updateGameList: true,\n      });\n    }\n  }\n\n  function handleUpdate() {\n    handleSubmit(['users', userId, 'games', $game.data.id], 'settings-form');\n  }\n\n  function handleDanger() {\n    const conf = confirm(\"Are you sure?\");\n    if (!conf)\n      return;\n\n    handleSubmit(['users', userId, 'games', $game.data.id], 'danger-form');\n  }\n\n  async function handleDestroy() {\n    const conf = confirm(\"Are you sure? \\\n    Once you delete a game, there is no going back. Please be certain!\");\n    if (!conf)\n      return;\n\n    const path = ['users', userId, 'games', $game.data.id];\n    const url = createUrl(apiProtocol, apiHost, ...path);\n    const res = await postFormData(url, {}, 'DELETE');\n\n    if (!res.ok) {\n      const t = await res.text();\n      error = JSON.parse(t);\n    } else {\n      /* Update Dashboard's game List */\n      dispatch('message', {\n        gameUrl: undefined,\n        updateGameList: true,\n      });\n    }\n  }\n\n  function addNamespace() {\n    const ns = document.getElementById('new-namespace');\n    if (!$game.data.attributes.namespaces.includes(ns.value)) {\n      game.update(g => ({\n        ...g,\n        data: {\n          ...g.data,\n          attributes: {\n            ...g.data.attributes,\n            namespaces: [...g.data.attributes.namespaces, ns.value],\n          },\n        },\n      }));\n    }\n    ns.value = '';\n  }\n\n  function removeNamespace(namespace) {\n    game.update(g => ({\n      ...g,\n      data: {\n        ...g.data,\n        attributes: {\n          ...g.data.attributes,\n          namespaces: g.data.attributes.namespaces.filter((e) => e !== namespace),\n        },\n      },\n    }));\n  }\n\n  function flushError() {\n    error = null;\n  }\n</script>\n\n\n<form id=\"settings-form\" on:submit|preventDefault={handleUpdate}>\n  <div class=\"notification is-danger\" class:is-hidden={!error} >\n    <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n    <h1 class='title is-5'>\n      Unable to Update Game :\n    </h1>\n    <ul>\n      {#if error}\n        {#each Object.entries(error) as [ key, ar ]}\n          <li>{key} : {ar}</li>\n        {/each}\n      {/if}\n    </ul>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">\n      Game Name\n    </label>\n    <div class=\"control\">\n      <input name=\"game[name]\" class=\"input reasonable-width\" type=\"text\"\n        value={$game.data.attributes.name}>\n    </div>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">\n      Description\n    </label>\n    <div class=\"control\">\n      <input name=\"game[description]\" class=\"input\" type=\"text\"\n        value={$game.data.attributes.description}>\n    </div>\n    <p class=\"help\">Game and description won't be visible to your players.</p>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">\n      Namespaces\n    </label>\n    <div class=\"field is-grouped is-grouped-multiline has-vcentered-content\">\n      {#each $game.data.attributes.namespaces as namespace, i (i)}\n        <div class=\"control\">\n          <input name=\"game[namespaces][]\" class=\"input\" type=\"hidden\"\n            value={namespace}>\n          <div class=\"tags has-addons\">\n            <span class=\"tag is-info\">\n              {namespace}\n            </span>\n            {#if namespace !== 'default'}\n              <span class=\"tag is-delete\" on:click={removeNamespace(namespace)}>\n              </span>\n            {/if}\n          </div>\n        </div>\n      {/each}\n        <input id=\"new-namespace\" class=\"input is-small\" type=\"text\"\n          placeholder=\"New\">\n        <button class=\"button is-primary is-outlined is-small\"\n          on:click|preventDefault={addNamespace}>\n          Add\n        </button>\n    </div>\n  </div>\n\n  <button class=\"button is-link save\">Update Settings</button>\n</form>\n\n<hr>\n\n<h1 class=\"title is-4\">Danger Zone :</h1>\n<form id=\"danger-form\" on:submit|preventDefault={handleDanger}>\n  <div class=\"field\">\n    <input name=\"game[archived]\" class=\"input\" type=\"hidden\"\n        value={!$game.data.attributes['archived']}>\n    <button class=\"button is-danger is-outlined\"\n      class:is-hidden={$game.data.attributes.archived}>Archive this Game</button>\n    <button class=\"button is-danger is-outlined\"\n      class:is-hidden={!$game.data.attributes.archived}>Reactivate this Game</button>\n    <p class=\"help\">Once you archive a game, no player will be able to access it anymore. Please be certain!</p>\n  </div>\n</form>\n\n<div class=\"field\">\n  <button class=\"button is-danger is-outlined\" on:click|preventDefault={handleDestroy}>\n    Delete this Game\n  </button>\n  <p class=\"help\">Once you delete a game, there is no going back. Please be certain!</p>\n</div>\n\n<style lang=scss>button.is-danger {\n  color: #cb2431 !important;\n  background: white !important;\n  border: 1px solid #cb2431 !important; }\n\nbutton.save {\n  margin-top: 2em; }\n\ninput#new-namespace {\n  max-width: 200px;\n  margin-right: 1em; }\n\n.is-delete {\n  cursor: pointer; }\n\n.control:not(:last-child) {\n  margin-bottom: 0.75rem;\n  margin-top: 0.75rem;\n  margin-right: 0.75rem; }\n\n/*# sourceMappingURL=Settings.svelte.css.map */</style>",
    "<script>\n  import { game } from '../../../../../javascripts/stores/gameStore';\n  export let assets;\n  export let formPrefix;\n\n\n  function removeAsset(assetIndex) {\n    assets = assets.filter((asset, index) => index !== assetIndex);\n  }\n\n  function addNewAsset() {\n    assets = [\n      ...assets,\n      {\n        key: '',\n        tuples: [\n          {\n            namespaces: $game.data.attributes.namespaces,\n            value: '',\n          },\n        ],\n      },\n    ]\n  }\n\n  /* When a user removes a namespace from the\n   * default value entry */\n  function createCustomEntry(assetIndex, namespace) {\n    /* Remove from where it belongs */\n    assets = assets.map((asset, index) => {\n      return index !== assetIndex ? asset : {\n        key: asset.key,\n        tuples: asset.tuples.map((tuple) => ({\n          namespaces: tuple.namespaces.filter((ns) => ns !== namespace),\n          value: tuple.value,\n        })),\n      };\n    });\n\n    /* Add a new custom entry */\n    assets = assets.map((asset, index) => {\n      return index !== assetIndex ? asset : {\n        key: asset.key,\n        tuples: [\n          ...asset.tuples,\n          {\n            namespaces: [namespace],\n            value: '',\n          }\n        ],\n      };\n    });\n  }\n\n  /* When the user removes a namespace from\n   * a custom entry */\n  function removeCustomEntry(assetIndex, namespace) {\n    /* Remove Custom Entry */\n    assets = assets.map((asset, index) => {\n      return index !== assetIndex ? asset : {\n        key: asset.key,\n        tuples: asset.tuples.filter((tuple) => !tuple.namespaces.includes(namespace)),\n      }\n    });\n\n    /* Add namespace to default Entry */\n    assets[0].tuples[0].namespaces = [\n      ...assets[0].tuples[0].namespaces,\n      namespace,\n    ]\n  }\n</script>\n\n<!-- Dummy value when no assets submitted -->\n<input class=\"input\" type=\"hidden\" name=\"{formPrefix}[assets][0][key]\" value=\"\">\n\n{#each assets as {key, tuples}, assetIndex}\n  <div class=\"asset-wrapper\">\n    <div class=\"columns\">\n      <div class=\"column right\">\n        <svg class=\"fa fill-destroy\" on:click={() => removeAsset(assetIndex)}>\n          <use href=\"../images/fontawesome-sprite.svg#regular-times-circle\" />\n        </svg>\n      </div>\n    </div>\n    <div class=\"columns is-vcentered\">\n      <div class=\"column is-4 right-label\">\n        <strong>key :</strong>\n      </div>\n      <div class=\"column asset-value\">\n        <input class=\"input is-family-monospace\" type=\"text\"\n          name=\"{formPrefix}[assets][{assetIndex}][key]\"\n          bind:value={key} placeholder=\"asset key\">\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-4 right-label\">\n        <strong>values :</strong>\n      </div>\n    </div>\n    {#each tuples as { namespaces, value }, tupleIndex}\n      <div class=\"columns is-vcentered\">\n        <div class=\"column is-4 right-label namespace-container\">\n          {#each namespaces as namespace}\n            <p>\n              <span class=\"tag is-link\">\n                {namespace}\n                <input class=\"input\" type=\"hidden\"\n                  name=\"{formPrefix}[assets][{assetIndex}][tuples][{tupleIndex}][namespaces][]\"\n                  value={namespace}>\n                {#if namespace !== 'default'}\n                  {#if namespaces.includes('default')}\n                    <button class=\"delete is-small\"\n                      on:click|preventDefault={createCustomEntry(assetIndex, namespace)}>\n                    </button>\n                  {:else}\n                    <button class=\"delete is-small\"\n                      on:click|preventDefault={removeCustomEntry(assetIndex, namespace)}>\n                    </button>\n                  {/if}\n                {/if}\n              </span>\n            </p>\n          {/each}\n        </div>\n        <div class=\"column asset-value is-family-monospace\">\n          <textarea class=\"input is-family-monospace\"\n            name=\"{formPrefix}[assets][{assetIndex}][tuples][{tupleIndex}][value]\"\n            bind:value={value} placeholder=\"asset value\" />\n        </div>\n      </div>\n    {/each}\n  </div>\n{/each}\n\n<div class=\"columns\">\n  <div class=\"column right-label\">\n    <button class=\"button is-primary is-outlined is-small\"\n      on:click|preventDefault={() => addNewAsset()}>\n      + New Asset\n    </button>\n  </div>\n</div>\n\n\n<style lang=\"scss\">.right-label {\n  /* Desktop */ }\n  @media screen and (min-width: 768px) {\n    .right-label {\n      text-align: right; } }\n\n.asset-wrapper {\n  border-radius: 0.15em;\n  background-color: #f6f8fa;\n  margin-bottom: 1em;\n  margin-top: 1em;\n  padding: 0.5em;\n  border: 1px solid #0096df; }\n  .asset-wrapper .columns {\n    margin-bottom: 0; }\n\n.right {\n  text-align: right; }\n\n.namespace-container {\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    .namespace-container {\n      padding-bottom: 0.2em;\n      display: inline-flex; } }\n  .namespace-container p {\n    margin-right: 0.5em; }\n\n.asset-value {\n  color: gray;\n  word-break: break-all;\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    .asset-value {\n      padding-top: 0;\n      margin-bottom: 1em; } }\n\n/*# sourceMappingURL=AssetsForm.svelte.css.map */</style>",
    "<script>\n  export let assets;\n</script>\n\n{#each assets as {key, tuples}}\n  <div class=\"asset-wrapper\">\n    <div class=\"columns is-vcentered\">\n      <div class=\"column is-4 right\">\n        <strong>key :</strong>\n      </div>\n      <div class=\"column asset-value is-family-monospace\">\n        {key}\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-4 right\">\n        <strong>values :</strong>\n      </div>\n    </div>\n    {#each tuples as { namespaces, value }}\n      <div class=\"columns is-vcentered\">\n        <div class=\"column is-4 right namespace-container\">\n          {#if namespaces.includes('default')}\n            <p>\n              <span class=\"tag is-link\">\n                default\n              </span>\n            </p>\n            {#if namespaces.length > 1}\n              <p>\n                <span class=\"tag is-link\">\n                  + {namespaces.length - 1} \n                  {(namespaces.length - 1) === 1 ? 'other' : 'others'} \n                </span>\n              </p>\n            {/if}\n          {:else}\n            {#each namespaces as namespace}\n              <p>\n                <span class=\"tag is-link\">\n                  {namespace}\n                </span>\n              </p>\n            {/each}\n          {/if}\n        </div>\n        <div class=\"column asset-value is-family-monospace\">\n          {value}\n        </div>\n      </div>\n    {/each}\n  </div>\n{/each}\n\n<style lang=\"scss\">.asset-wrapper {\n  border-radius: 0.15em;\n  background-color: #f6f8fa;\n  margin-bottom: 1em;\n  margin-top: 1em;\n  padding: 0.5em;\n  border: 1px solid #0096df; }\n  .asset-wrapper .columns {\n    margin-bottom: 0; }\n\n.right {\n  text-align: right; }\n\n.namespace-container {\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    .namespace-container {\n      padding-bottom: 0.2em;\n      display: inline-flex; } }\n  .namespace-container p {\n    margin-right: 0.5em; }\n\n.asset-value {\n  color: gray;\n  word-break: break-all;\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    .asset-value {\n      padding-top: 0;\n      margin-bottom: 1em; } }\n\n/*# sourceMappingURL=AssetsIndex.svelte.css.map */</style>",
    "<script>\n  import ActionTriggerShow from './ConditionsShows/ActionTrigger.svelte';\n  import ActionTriggerForm from './ConditionsForms/ActionTrigger.svelte';\n  import UnlockedAchievementShow from './ConditionsShows/UnlockedAchievement.svelte';\n  import UnlockedAchievementForm from './ConditionsForms/UnlockedAchievement.svelte';\n  import TimeFrameShow from './ConditionsShows/TimeFrame.svelte';\n  import TimeFrameForm from './ConditionsForms/TimeFrame.svelte';\n  import { game } from '../../../../../javascripts/stores/gameStore';\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let formPrefix;\n  export let conditions;\n  let newConditionType;\n\n  const conditionsShowsComponents = {\n    action_trigger: ActionTriggerShow,\n    unlocked_achievement: UnlockedAchievementShow,\n    time_frame: TimeFrameShow,\n  };\n  const conditionsFormsComponents = {\n    action_trigger: ActionTriggerForm,\n    unlocked_achievement: UnlockedAchievementForm,\n    time_frame: TimeFrameForm,\n  }\n\n  function addCondition(evt){\n    dispatch('updateConditions', {\n      conditions: [...conditions, evt.detail.condition],\n    });\n    newConditionType = \"\";\n  }\n</script>\n\n\n<div>\n  <hr>\n  {#if !conditions || !conditions.length}\n    <p class=\"no-conditions\">\n      No conditions yet\n    </p>\n  {:else}\n    <ul class=\"conditions-list\">\n      {#each conditions as condition, i (i)}\n        <li>\n          <svelte:component\n            {condition}\n            formPrefix={formPrefix ? `${formPrefix}[${i}]` : undefined}\n            underlyings={$game.included}\n            this={conditionsShowsComponents[condition.attributes.conditionType]}\n            on:message/>\n        </li>\n      {/each}\n    </ul>\n  {/if}\n  <hr>\n</div>\n\n{#if formPrefix}\n  <div class=\"new-condition-container\">\n    <div class=\"columns\">\n      <div class=\"column is-narrow-desktop has-vcentered-content new-condition-label\">\n        New Condition :\n      </div>\n      <div class=\"column is-narrow-desktop\">\n        <div class=\"select is-link\">\n          <select bind:value={newConditionType}>\n            <option value=\"\">--</option>\n            <option value=\"action_trigger\">Action trigger</option>\n            <option value=\"unlocked_achievement\">Unlocked Achievement</option>\n            <option value=\"time_frame\">Time frame</option>\n            <option value=\"scarcity\" disabled>Scarcity</option>\n            <option value=\"lottery\" disabled>Lottery</option>\n            <option value=\"subcondition\" disabled>Sub Condition Set</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n\n    <svelte:component\n      underlyings={$game.included}\n      this={conditionsFormsComponents[newConditionType]}\n      on:addCondition={addCondition}/>\n  </div>\n{/if}\n\n\n\n<style lang=\"scss\">.new-condition-container {\n  background-color: #f6f8fa;\n  padding: 1em; }\n\n.conditions-list li {\n  margin-bottom: 2em; }\n\n.new-condition-label {\n  align-self: center; }\n\n/*# sourceMappingURL=Conditions.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n  export let underlyings;\n  let actions;\n  let action;\n  let count = 1;\n  let period = 0;\n  let underlyingId = null;\n  const underlyingType = 'Action';\n  const attribute = 'score';\n  let value;\n  let comparison;\n  let inverted = false;\n  let error = null;\n\n  const periodEnum = {\n    0: 'past year',\n    1: 'past 90 days',\n    2: 'past 30 days',\n    3: 'past 7 days',\n    4: 'past 5 days',\n    5: 'past 3 days',\n    6: 'past 2 days',\n    7: 'past 24 hours',\n  };\n\n  function addCondition() {\n    error = null;\n    const scoreValidation = value;\n\n    if (isNaN(parseInt(count))) {\n      error = {\n        ...error,\n        'trigger count': `Trigger count must be a number, not \"${count}\"`,\n      };\n    }\n    if (action.attributes.actionType === 'int' ||\n        action.attributes.actionType === 'float') {\n      if(isNaN(parseInt(value))) {\n        error = {\n          ...error,\n          attribute: `Score value must be a number because \\\n  ${action.attributes.name}'s Scoretype is ${action.attributes.actionType}`,\n        };\n      }\n    } else if (action.attributes.actionType === 'string') {\n      if (!value || !Array.isArray(value.split(','))) {\n        error = {\n          ...error,\n          attribute: `Score value must be a comma separated list of\naccepted values because ${action.attributes.name}'s Scoretype \\\nis ${action.attributes.actionType}`,\n        };\n      }\n    }\n    \n    if (error) return;\n\n    /* Gather form */\n    const newCondition = {\n      type: 'condition',\n      relationships: {\n        underlying: {\n          data: {\n            id: underlyingId,\n            type: 'action',\n          }\n        }\n      },\n      attributes: {\n        conditionType: 'action_trigger',\n        inverted,\n        criteria: {\n          count,\n          period,\n          validations: [{\n            attribute,\n            comparison,\n            value,\n          }],\n        }\n      }\n    };\n\n    /* Dispatch to Conditions Component */\n    dispatch('addCondition', {\n      condition: newCondition,\n    });\n  }\n\n  function flushError() {\n    error = null;\n  }\n\n  $: actions= underlyings.filter((e) => e.type === 'action');\n  $: action = actions.find((a) => a.id === underlyingId);\n</script>\n\n\n<div class=\"columns\">\n  <div class=\"column\">\n    <div class=\"field is-horizontal\">\n      <div class=\"field-label\"\n        class:has-hvcentered-content={!actions.length}\n        class:is-normal={actions.length}>\n        <label class=\"label\">Action :</label>\n      </div>\n      <div class=\"field-body\">\n        <div class=\"field\">\n          {#if actions.length}\n            <div class=\"select\">\n              <select bind:value={underlyingId}>\n                <option value=\"\">--</option>\n                {#each actions as action, i (i)}\n                  <option value=\"{action.id}\">{action.attributes.name}</option>\n                {/each}\n              </select>\n            </div>\n          {:else}\n            <p class=\"no-actions\">No Action defined in the Action tab yet.</p>\n          {/if}\n        </div>\n      </div>\n    </div>\n\n    {#if actions.length}\n      \n      <div class=\"notification is-warning\" class:is-hidden={!error} >\n        <button class=\"delete\" on:click|preventDefault={() => flushError()} ></button>\n        <h1 class='title is-5'>\n          Unable to add Condition :\n        </h1>\n        <ul>\n          {#if error}\n            {#each Object.entries(error) as [ key, ar ]}\n              <li>{key} : {ar}</li>\n            {/each}\n          {/if}\n        </ul>\n      </div>\n\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Triggered :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <p class=\"has-vcentered-content\">\n              minimum <input class=\"input count\" type=\"text\" bind:value={count}>\n              <strong>{parseInt(count) === 1 ? 'time' : 'times'}</strong>\n            </p>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Over the :</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <div class=\"select\">\n              <select bind:value={period}>\n                {#each Object.entries(periodEnum) as [k, v], i (i)}\n                  <option value=\"{k}\">{v}</option>\n                {/each}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {#if underlyingId}\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Score :</label>\n          </div>\n          <div class=\"field-body\">\n              <div class=\"field\">\n                <p class=\"control\">\n                  {#if action.attributes.actionType === 'boolean'}\n                    <div class=\"select\">\n                      <select bind:value={comparison}>\n                        <option value=\"eq\">= equal to</option>\n                      </select>\n                    </div>\n                  {:else if action.attributes.actionType === 'int' ||\n                            action.attributes.actionType === 'float'}\n                    <div class=\"select\">\n                      <select bind:value={comparison}>\n                        <option value=\"gteq\">≥ greater than or equal to</option>\n                        <option value=\"lteq\">≤ less than or equal to</option>\n                        <option value=\"eq\">= equal to</option>\n                      </select>\n                    </div>\n                  {:else}\n                    <!-- string's shortlist -->\n                    <div class=\"select\">\n                      <select bind:value={comparison}>\n                        <option value=\"shortlist\">[⟷] within</option>\n                      </select>\n                    </div>\n                  {/if}\n                </p>\n              </div>\n              <div class=\"field\">\n                <div class=\"control\">\n                  {#if action.attributes.actionType === 'boolean'}\n                    <div class=\"select\">\n                      <select bind:value={value}>\n                        <option value=\"1\">Pass</option>\n                        <option value=\"0\">Fail</option>\n                      </select>\n                    </div>\n                  {:else if action.attributes.actionType === 'int' ||\n                            action.attributes.actionType === 'float' ||\n                            action.attributes.actionType === 'string'}\n                    <input type=\"text\" class=\"input reasonable-width\"\n                      bind:value={value} required>\n                  {:else if action.attributes.actionType === 'shortlist'}\n                    <input type=\"text\" class=\"input reasonable-width\"\n                      bind:value={value}\n                      placeholder=\"comma separated list\"\n                      required>\n                  {/if}\n                </div>\n              </div>\n              <p class=\"help\">Possible score values depend on selected Action's scoretype</p>\n          </div>\n        </div>\n      {/if}\n\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-normal\">\n          <label class=\"label\">Inverted ?</label>\n        </div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <label class=\"checkbox\">\n              <p class=\"help\">\n                <input type=\"checkbox\" bind:checked={inverted} />\n                The condition MUST NOT be met to be validated 🙃\n              </p>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"columns\">\n        <div class=\"column\">\n          <button class=\"button is-primary is-outlined\"\n            on:click|preventDefault={addCondition} disabled={!underlyingId}>\n            Add\n          </button>\n        </div>\n      </div>\n    {/if}\n  </div>\n</div>\n\n<style lang=\"scss\">.no-actions {\n  font-style: italic;\n  color: gray;\n  margin: 1em 1em 1em 0.5em;\n  /* top right bottom left */\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    .no-actions {\n      text-align: center; } }\n\n/*# sourceMappingURL=ActionTrigger.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n  export let underlyings;\n  let achievements;\n  let achievement;\n  let underlyingId = null;\n  let inverted = false;\n  const underlyingType = 'Achievement';\n\n  function addCondition() {\n    /* Gather form */\n    const newCondition = {\n      type: 'condition',\n      relationships: {\n        underlying: {\n          data: {\n            id: underlyingId,\n            type: 'achievement',\n          }\n        }\n      },\n      attributes: {\n        conditionType: 'unlocked_achievement',\n        inverted,\n      }\n    };\n\n    /* Dispatch to Conditions Component */\n    dispatch('addCondition', {\n      condition: newCondition,\n    });\n  }\n\n  $: achievements= underlyings.filter((e) => e.type === 'achievement');\n  $: achievement = achievements.find((a) => a.id === underlyingId);\n</script>\n\n<div class=\"columns\">\n  <div class=\"column\">\n    <div class=\"field is-horizontal\">\n      <div class=\"field-label\"\n        class:has-hvcentered-content={!achievements.length}\n        class:is-normal={achievements.length}>\n        <label class=\"label\">Achievement :</label>\n      </div>\n      <div class=\"field-body\">\n        <div class=\"field\">\n          {#if achievements.length}\n            <div class=\"select\">\n              <select bind:value={underlyingId}>\n                <option value=\"\">--</option>\n                {#each achievements as achievement, i (i)}\n                  <option value=\"{achievement.id}\">{achievement.attributes.name}</option>\n                {/each}\n              </select>\n            </div>\n          {:else}\n            <p class=\"no-achievements\">No Achievement defined in the Achievement tab yet.</p>\n          {/if}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"field is-horizontal\">\n      <div class=\"field-label is-normal\">\n        <label class=\"label\">Inverted ?</label>\n      </div>\n      <div class=\"field-body\">\n        <div class=\"field\">\n          <label class=\"checkbox\">\n            <p class=\"help\">\n              <input type=\"checkbox\" bind:checked={inverted} />\n              The achievement MUST NOT be unlocked 🙃\n            </p>\n          </label>\n        </div>\n      </div>\n    </div>\n\n    {#if achievements.length}\n      <div class=\"columns\">\n        <div class=\"column\">\n          <button class=\"button is-primary is-outlined\"\n            on:click|preventDefault={addCondition} disabled={!underlyingId}>\n            Add\n          </button>\n        </div>\n      </div>\n    {/if}\n  </div>\n</div>\n\n<style lang=\"scss\">.no-achievements {\n  font-style: italic;\n  color: gray;\n  margin: 1em 1em 1em 0.5em;\n  /* top right bottom left */\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    .no-achievements {\n      text-align: center; } }\n\n/*# sourceMappingURL=UnlockedAchievement.svelte.css.map */</style>",
    "<script>\n  import { capitalizeFirstLetter } from '../../../../../../javascripts/utils/helpers';\n  export let formPrefix;\n  export let condition;\n  export let underlyings;\n  let underlying;\n\n  const periodEnum = {\n    0: 'past year',\n    1: 'past 90 days',\n    2: 'past 30 days',\n    3: 'past 7 days',\n    4: 'past 5 days',\n    5: 'past 3 days',\n    6: 'past 2 days',\n    7: 'past 24 hours',\n  };\n\n  const comparisonEnum = {\n    eq: '= equal to',\n    gteq: '≥ greater than or equal to',\n    lteq: '≤ less than or equal to',\n    shortlist: '[⟷] within',\n  }\n\n  function destroyCondition() {\n    condition.attributes._destroy = true;\n  }\n\n  $: underlying = underlyings.find((u) => \n    u.id === condition.relationships.underlying.data.id &&\n    u.type === condition.relationships.underlying.data.type\n  );\n</script>\n\n\n<div class=\"content\" class:is-hidden={condition.attributes._destroy}>\n  <div class=\"columns is-mobile\">\n    <div class=\"column\">\n      <svg class=\"fa check\">\n        <use href=\"../images/fontawesome-sprite.svg#regular-check-circle\" />\n      </svg>\n      {#if condition.attributes.inverted}\n        <span class=\"not\">NOT</span>\n      {/if}\n      Trigged <strong>'{underlying.attributes.name}'</strong>\n    </div>\n    {#if formPrefix}\n      <div class=\"column is-narrow\">\n        <svg class=\"fa fill-destroy\" on:click={destroyCondition}>\n          <use href=\"../images/fontawesome-sprite.svg#regular-times-circle\" />\n        </svg>\n      </div>\n    {/if}\n  </div>\n  <ul>\n    <li>\n      mininum\n      <strong>\n        {condition.attributes.criteria.count}\n        {parseInt(condition.attributes.criteria.count) === 1 ? 'time' : 'times'}\n      </strong>;\n    </li>\n    {#each condition.attributes.criteria.validations as validation, i (i)}\n      <li>\n        with a <strong>{validation.attribute}</strong> {comparisonEnum[validation.comparison]}\n        <strong>\n          {validation.value}\n        </strong>;\n\n        {#if formPrefix}\n          <input type=\"hidden\" name=\"{formPrefix}[criteria][validations][{i}][attribute]\"\n          value=\"{validation.attribute}\">\n          <input type=\"hidden\" name=\"{formPrefix}[criteria][validations][{i}][comparison]\"\n          value=\"{validation.comparison}\">\n          <input type=\"hidden\" name=\"{formPrefix}[criteria][validations][{i}][value]\"\n          value=\"{validation.value}\">\n        {/if}\n      </li>\n    {/each}\n    <li>\n      over the <strong>{periodEnum[condition.attributes.criteria.period]}</strong>.\n    </li>\n  </ul>\n\n  {#if formPrefix}\n    <input type=\"hidden\" name=\"{formPrefix}[criteria][count]\"\n      value=\"{condition.attributes.criteria.count}\">\n\n    <input type=\"hidden\" name=\"{formPrefix}[criteria][period]\"\n    value=\"{condition.attributes.criteria.period}\">\n\n    <input type=\"hidden\" name=\"{formPrefix}[inverted]\"\n      value=\"{condition.attributes.inverted}\">\n\n    <input type=\"hidden\" name=\"{formPrefix}[underlying_type]\"\n      value=\"{capitalizeFirstLetter(condition.relationships.underlying.data.type)}\">\n\n    <input type=\"hidden\" name=\"{formPrefix}[underlying_id]\"\n      value=\"{condition.relationships.underlying.data.id}\">\n\n    <input type=\"hidden\" name=\"{formPrefix}[condition_type]\" value=\"action_trigger\">\n\n    {#if condition.attributes._destroy}\n      <input type=\"hidden\" name=\"{formPrefix}[_destroy]\" value=\"true\">\n    {/if}\n  {/if}\n</div>\n\n\n<style lang=\"scss\">.check {\n  fill: #0096df; }\n\nul {\n  font-size: 0.8em;\n  font-style: italic; }\n\n.not {\n  color: #c40000; }\n\n/*# sourceMappingURL=ActionTrigger.svelte.css.map */</style>",
    "<script>\n  import { capitalizeFirstLetter } from '../../../../../../javascripts/utils/helpers';\n  export let formPrefix;\n  export let condition;\n  // eslint-disable-next-line unused-export-let\n  export let underlyings = [];\n\n  function destroyCondition() {\n    condition.attributes._destroy = true;\n  }\n</script>\n\n<div class=\"content\" class:is-hidden={condition.attributes._destroy}>\n  <div class=\"columns is-mobile\">\n    <div class=\"column\">\n      <svg class=\"fa check\">\n        <use href=\"../images/fontawesome-sprite.svg#regular-check-circle\" />\n      </svg>\n      {#if condition.attributes.inverted}\n        <span class=\"not\">NOT</span>\n      {/if}\n      Between <strong>{condition.attributes.criteria.from}</strong> and\n      <strong>{condition.attributes.criteria.to}</strong> (both included)\n    </div>\n    {#if formPrefix}\n      <div class=\"column is-narrow\">\n        <svg class=\"fa fill-destroy\" on:click={destroyCondition}>\n          <use href=\"../images/fontawesome-sprite.svg#regular-times-circle\" />\n        </svg>\n      </div>\n\n      <input type=\"hidden\" name=\"{formPrefix}[inverted]\"\n        value=\"{condition.attributes.inverted}\">\n\n      <input type=\"hidden\" name=\"{formPrefix}[criteria][from]\"\n      value=\"{(new Date(condition.attributes.criteria.from)).toLocaleDateString()}\">\n\n      <input type=\"hidden\" name=\"{formPrefix}[criteria][to]\"\n      value=\"{(new Date(condition.attributes.criteria.to)).toLocaleDateString()}\">\n\n      <input type=\"hidden\" name=\"{formPrefix}[condition_type]\" value=\"time_frame\">\n\n      {#if condition.attributes._destroy}\n        <input type=\"hidden\" name=\"{formPrefix}[_destroy]\" value=\"true\">\n      {/if}\n    {/if}\n  </div>\n</div>\n\n<style lang=\"scss\">.check {\n  fill: #0096df; }\n\n.not {\n  color: #c40000; }\n\n/*# sourceMappingURL=TimeFrame.svelte.css.map */</style>",
    "<script>\n  import { capitalizeFirstLetter } from '../../../../../../javascripts/utils/helpers';\n  export let formPrefix;\n  export let condition;\n  export let underlyings;\n  let underlying;\n\n  function destroyCondition() {\n    condition.attributes._destroy = true;\n  }\n\n  $: underlying = underlyings.find((u) => \n    u.id === condition.relationships.underlying.data.id &&\n    u.type === condition.relationships.underlying.data.type\n  );\n</script>\n\n<div class=\"content\" class:is-hidden={condition.attributes._destroy}>\n  <div class=\"columns is-mobile\">\n    <div class=\"column\">\n      <svg class=\"fa check\">\n        <use href=\"../images/fontawesome-sprite.svg#regular-check-circle\" />\n      </svg>\n      {#if condition.attributes.inverted}\n        <span class=\"not\">NOT</span>\n      {/if}\n      Unlocked <strong>'{underlying.attributes.name}'</strong>\n    </div>\n    {#if formPrefix}\n      <div class=\"column is-narrow\">\n        <svg class=\"fa fill-destroy\" on:click={destroyCondition}>\n          <use href=\"../images/fontawesome-sprite.svg#regular-times-circle\" />\n        </svg>\n      </div>\n\n      <input type=\"hidden\" name=\"{formPrefix}[inverted]\"\n        value=\"{condition.attributes.inverted}\">\n\n      <input type=\"hidden\" name=\"{formPrefix}[underlying_type]\"\n        value=\"{capitalizeFirstLetter(condition.relationships.underlying.data.type)}\">\n\n      <input type=\"hidden\" name=\"{formPrefix}[underlying_id]\"\n        value=\"{condition.relationships.underlying.data.id}\">\n\n      <input type=\"hidden\" name=\"{formPrefix}[condition_type]\" value=\"unlocked_achievement\">\n\n      {#if condition.attributes._destroy}\n        <input type=\"hidden\" name=\"{formPrefix}[_destroy]\" value=\"true\">\n      {/if}\n    {/if}\n  </div>\n</div>\n\n<style lang=\"scss\">.check {\n  fill: #0096df; }\n\n.not {\n  color: #c40000; }\n\n/*# sourceMappingURL=UnlockedAchievement.svelte.css.map */</style>",
    "<script>\n  import Conditions from './Conditions.svelte';\n  import { fetchData } from '../../../../../javascripts/utils/helpers';\n  import { game } from '../../../../../javascripts/stores/gameStore';\n  export let relation = {\n    attributes: {\n      count: 1,\n    },\n  };\n  export let conditions;\n  export let formPrefix;\n  let error = null;\n\n  function updateConditions(evt) {\n    conditions = evt.detail.conditions;\n  }\n\n  function filterConditions(relation, game) {\n    if (!relation.relationships)\n      return [];\n\n    const conditionIds = relation.relationships.conditions.data.map((c) => c.id);\n\n    return game.included.filter((e) => (\n      conditionIds.includes(e.id) && e.type === 'condition'\n    ));\n  }\n\n  $: conditions = filterConditions(relation, $game);\n</script>\n\n<div class=\"relation-wrapper\">\n  {#if formPrefix}\n    <input type=\"hidden\" name=\"{formPrefix}[game_id]\"\n      value=\"{$game.data.id}\">\n\n    <div class=\"field\">\n      <label class=\"label\">\n        Type\n      </label>\n      <!-- Desktop -->\n      <div class=\"select is-hidden-desktop\">\n        <select name=\"{formPrefix}[relation_type]\"\n          bind:value={relation.attributes.relationType}>\n          <option value='binomial'>Binomial</option>\n          <option value='xor'>eXclusive OR</option>\n        </select>\n      </div>\n\n      <!-- Mobile -->\n      <div class=\"select is-hidden-touch\">\n        <select name=\"{formPrefix}[relation_type]\"\n          bind:value={relation.attributes.relationType}>\n          <option value='binomial'>Binomial (meet at least X among Y cond.)</option>\n          <option value='xor'>eXclusive OR (meet exactly 1 among Y cond.)</option>\n        </select>\n      </div>\n    </div>\n  {/if}\n\n  <div class=\"field\">\n    <div class=\"columns is-variable is-1 compact-mobile\"\n      class:is-hidden={relation.attributes.relationType == 'xor'}>\n      <div class=\"column is-narrow-desktop is-gapless-desktop has-vcentered-text\">\n        Player must validate \n      </div>\n      <div class=\"column is-narrow-desktop has-vcentered-text\">\n        <em>minimum</em>\n        <input type=\"text\" class=\"input count\"\n          name=\"{formPrefix}[count]\" bind:value={relation.attributes.count}\n          disabled={formPrefix === undefined}>\n        {relation.attributes.count === 1 ? 'condition' : 'conditions'}\n      </div>\n      <div class=\"column is-narrow-desktop has-vcentered-text\">\n         among the following ↴ :\n      </div>\n    </div>\n\n    <div class=\"columns is-variable is-1 compact-mobile\"\n      class:is-hidden={relation.attributes.relationType == 'binomial'}>\n      <div class=\"column is-narrow-desktop is-gapless-desktop has-vcentered-text\">\n        Player must validate \n      </div>\n      <div class=\"column is-narrow-desktop has-vcentered-text\">\n        <em>exactly</em>\n        <input type=\"text\" class=\"input count\"\n      value=\"1\" disabled=\"true\">\n        condition\n      </div>\n      <div class=\"column is-narrow-desktop has-vcentered-text\">\n         among the following ↴ :\n      </div>\n    </div>\n  </div>\n\n  <Conditions\n    {conditions}\n    formPrefix={ formPrefix ? `${formPrefix}[conditions_attributes]` : undefined}\n    on:updateConditions={updateConditions}/>\n\n</div>\n\n<style lang=\"scss\">div.relation-wrapper {\n  max-width: 96%;\n  margin-left: auto;\n  margin-right: auto; }\n\ndiv.compact-mobile {\n  /* Mobile */ }\n  @media screen and (max-width: 768px) {\n    div.compact-mobile {\n      margin-top: 1em; }\n      div.compact-mobile div.column {\n        padding: 0.15em; } }\n\n/*# sourceMappingURL=Relation.svelte.css.map */</style>"
  ],
  "names": [],
  "mappings": "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"
}